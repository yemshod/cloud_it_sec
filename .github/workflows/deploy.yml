
name: Apply

on:
  issue_comment:
    types: [created]

jobs:
  apply:
    if: github.event.issue.pull_request &&
        contains(github.event.comment.html_url, '/pull/') &&
        startsWith(github.event.comment.body, '/ok-to-apply')
    runs-on: [ self-hosted ]

    strategy:
      matrix:
        department: [networking, security, engineering]

    defaults:
      run:
        working-directory: accounts/account1/${{ matrix.department }}

    steps:
      - name: Get target branch
        id: get-ref
        uses: actions/github-script@v3
        with:
          result-encoding: string
          script: |
            const response = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.issue.number
            });
            return response.data.head.ref;

      - name: Checkout source branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.get-ref.outputs.result }}

      - name: Get latest commit SHA
        id: sha
        run: echo "::set-output name=sha::$(git rev-parse HEAD)"

      - name: Set GitHub commit status to pending
        uses: actions/github-script@v3.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.sha.outputs.sha }}",
              state: "pending",
              description: "Terraform apply in progress",
              context: "tf-apply",
              target_url: "https://git01.exactt.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            });

      - name: Check permission to apply
        uses: pri-actions/owners-slash-command@v0.1.0

      - name: Setup proxy
        uses: pri-actions/setup-proxy@v0.0.2

      - name: Import secrets from Vault
        id: secrets
        uses: pri-actions/vault-action@v2.1.2
        with:
          url: https://vaultsb.exactt.com
          method: approle
          roleId: ${{ secrets.VAULTSB_ROLE_ID }}
          secretId: ${{ secrets.VAULTSB_SECRET_ID }}
          tlsSkipVerify: true
          secrets: |
            secret/data/aws/account1/terraform AWS_ACCESS_KEY_ID | AWS_ACCESS_KEY_ID ;
            secret/data/aws/account1/terraform AWS_SECRET_ACCESS_KEY | AWS_SECRET_ACCESS_KEY ;

      - name: GitHub Enterprise Git config
        run: |
          git config --global url."https://foo:${{ steps.secrets.outputs.github_token }}@git01.exactt.com".insteadOf "https://git01.exactt.com"

      - name: Setup Terraform
        uses: pri-actions/setup-terraform@v1.8.5

      - name: Terraform Init
        run: terraform init -backend-config=../backend.s3.tfbackend
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=../terraform.tfvars
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}

      - name: Comment Apply Result on PR
        if: always()
        uses: actions/github-script@v3.1.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const state = "${{ steps.apply.outcome }}" === "success" ? "success" : "failure";
            github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.sha.outputs.sha }}",
              state,
              description: "Terraform apply",
              context: "tf-apply",
              target_url: "https://git01.exactt.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            });

      - name: Cleanup GitConfig
        if: always()
        run: rm ~/.gitconfig
