Since your **group and permission sets already exist** in your AWS account (created manually), Terraform doesn't have these resources in its state file. Because Terraform isn't managing them, it doesn't know their IDs or ARNs, causing the empty-map issue you're encountering.

---

## ðŸš© **Why you're seeing this error clearly:**

- Terraform is attempting to reference IDs and ARNs of groups and permission sets it didn't create and therefore doesn't manage.
- Your modules expect the IDs and ARNs in the outputs of earlier Terraform-created resources, which don't exist.

---

## âœ… **Recommended Solution (Terraform Data Sources):**

You need to use **Terraform Data Sources** explicitly to fetch the existing IDs and ARNs from AWS. This is the standard solution when referencing resources created manually or externally.

Here's the exact detailed solution clearly explained:

---

### âœ… **Step 1: Use Terraform Data Sources**

Add Terraform Data sources in the root module (`main.tf`) or in the `pri_assign_permission_set` module directly to fetch existing groups and permission set ARNs clearly:

**Example:**

```hcl
# Fetch existing Permission Set ARN
data "aws_ssoadmin_instances" "sso" {}

data "aws_ssoadmin_permission_set" "existing_permission_set" {
  instance_arn = tolist(data.aws_ssoadmin_instances.sso.arns)[0]
  name         = "AWSAdministratorAccess"
}

# Fetch existing Identity Store ID
data "aws_ssoadmin_instances" "sso_instances" {}

data "aws_identitystore_group" "existing_group" {
  identity_store_id = tolist(data.aws_ssoadmin_instances.sso.identity_store_ids)[0]
  alternate_identifier {
    unique_attribute {
      attribute_path  = "displayName"
      attribute_value = "gd_priaws_admin"
    }
  }
}
```

---

### âœ… **Step 2: Update your `pri_assign_permission_set` Module Call**

Pass these directly to the module from the root `main.tf`:

```hcl
module "permission_set_assignments" {
  source                = "./modules/pri_assign_permission_set"
  sso_instance_arn      = tolist(data.aws_ssoadmin_instances.sso.arns)[0]
  assignments           = local.permission_set_assignments

  # Manually construct permission set ARN and group ID
  permission_set_arns = {
    "AWSAdministratorAccess" = data.aws_ssoadmin_permission_set.existing_permission_set.arn
  }

  group_ids = {
    "gd_priaws_admin" = data.aws_identitystore_group.existing_group.group_id
  }
}
```

This explicitly provides the required maps directly from AWS rather than relying on Terraform-managed outputs.

---

### âœ… **Step 3: Ensure your JSON Assignment file remains the same**

Keep your `permission_set_assignments.json` file unchanged, matching the exact names used in the data queries:

```json
[
  {
    "group_name": "gd_priaws_admin",
    "permission_set_name": "AWSAdministratorAccess",
    "account_ids": ["123456789012", "1105669XXXX"]
  }
]
```

---

### âœ… **Step 4: Apply Terraform**

Execute Terraform again clearly and explicitly:

```bash
terraform init
terraform plan -var-file=terraform.tfvars
terraform apply -auto-approve -var-file=terraform.tfvars
```

This explicitly instructs Terraform to query existing AWS resources, fetch their IDs/ARNs, and then perform the assignment.

---

## âœ… **Why this is the correct approach explicitly:**

- Uses Terraformâ€™s built-in "Data Sources" clearly to retrieve IDs and ARNs for existing resources.
- Allows Terraform to manage assignments even when groups/permission sets are created manually or externally.
- Ensures no conflicts with existing resources, preserving their current state and configuration explicitly.

---

## âœ… **Important Notes:**

- Ensure your Terraform AWS credentials have permission to list and describe existing IDC resources.
- Explicitly verify group names and permission set names exactly match what's defined in AWS to avoid data lookup issues.




========================

## Flexible Terraform Implementation for AWS Identity Center Automation (JSON Files)

The solution below ensures flexibility, allowing JSON input files to be empty or contain changes dynamically. It gracefully handles empty files or files with no new changes without errors, effectively managing scalability and collaboration. It now supports **existing AWS IDC resources** as well as creating new ones when missing.

### Directory Structure
```
aws-sso-automation/
â”œâ”€â”€ modules
â”‚   â”œâ”€â”€ pri_create_user
â”‚   â”‚   â””â”€â”€ main.tf
â”‚   â”œâ”€â”€ pri_create_group
â”‚   â”‚   â””â”€â”€ main.tf
â”‚   â”œâ”€â”€ pri_user_group_assignment
â”‚   â”‚   â””â”€â”€ main.tf
â”‚   â”œâ”€â”€ pri_create_permission_set
â”‚   â”‚   â””â”€â”€ main.tf
â”‚   â””â”€â”€ pri_assign_permission_set
â”‚       â””â”€â”€ main.tf
â”œâ”€â”€ data
â”‚   â”œâ”€â”€ users.json
â”‚   â”œâ”€â”€ groups.json
â”‚   â”œâ”€â”€ user_group_assignments.json
â”‚   â”œâ”€â”€ permission_sets.json
â”‚   â””â”€â”€ permission_set_assignments.json
â”œâ”€â”€ policies
â”‚   â””â”€â”€ admin_inline_policy.json
â”œâ”€â”€ main.tf
â”œâ”€â”€ variables.tf
â”œâ”€â”€ outputs.tf
â””â”€â”€ terraform.tfvars
```

## Dynamic Support for Existing IDC Resources

### Root `main.tf` Enhancements:
```hcl
# Load SSO Instance Information

data "aws_ssoadmin_instances" "sso" {}

locals {
  sso_instance_arn  = tolist(data.aws_ssoadmin_instances.sso.arns)[0]
  identity_store_id = tolist(data.aws_ssoadmin_instances.sso.identity_store_ids)[0]

  permission_sets = length(file("data/permission_sets.json")) > 2 ? jsondecode(file("data/permission_sets.json")) : []
  groups          = length(file("data/groups.json")) > 2 ? jsondecode(file("data/groups.json")) : []
  users           = length(file("data/users.json")) > 2 ? jsondecode(file("data/users.json")) : []
  user_group_assignments     = length(file("data/user_group_assignments.json")) > 2 ? jsondecode(file("data/user_group_assignments.json")) : []
  permission_set_assignments = length(file("data/permission_set_assignments.json")) > 2 ? jsondecode(file("data/permission_set_assignments.json")) : []

  desired_permission_set_names = [for ps in local.permission_sets : ps.name]
  desired_group_names          = [for g in local.groups : g.group_name]
  desired_user_names           = [for u in local.users : u.user_name]
}

# Query Existing Permission Sets

data "aws_ssoadmin_permission_set" "existing" {
  for_each     = toset(local.desired_permission_set_names)
  name         = each.value
  instance_arn = local.sso_instance_arn
}

# Query Existing Groups

data "aws_identitystore_group" "existing" {
  for_each = toset(local.desired_group_names)

  identity_store_id = local.identity_store_id

  alternate_identifier {
    unique_attribute {
      attribute_path  = "displayName"
      attribute_value = each.value
    }
  }
}

# Query Existing Users

data "aws_identitystore_user" "existing" {
  for_each = toset(local.desired_user_names)

  identity_store_id = local.identity_store_id

  alternate_identifier {
    unique_attribute {
      attribute_path  = "userName"
      attribute_value = each.value
    }
  }
}

# Create Permission Sets if not existing
resource "aws_ssoadmin_permission_set" "pri" {
  for_each = {
    for ps in local.permission_sets :
    ps.name => ps if !contains(keys(data.aws_ssoadmin_permission_set.existing), ps.name)
  }

  name         = each.value.name
  description  = each.value.description
  instance_arn = local.sso_instance_arn
}

# Create Groups if not existing
resource "aws_identitystore_group" "pri" {
  for_each = {
    for g in local.groups :
    g.group_name => g if !contains(keys(data.aws_identitystore_group.existing), g.group_name)
  }

  identity_store_id = local.identity_store_id
  display_name      = each.value.group_name
  description       = each.value.description
}

# Create Users if not existing
resource "aws_identitystore_user" "pri" {
  for_each = {
    for u in local.users :
    u.user_name => u if !contains(keys(data.aws_identitystore_user.existing), u.user_name)
  }

  identity_store_id = local.identity_store_id
  user_name         = each.value.user_name
  display_name      = each.value.display_name

  name {
    given_name  = split(" ", each.value.display_name)[0]
    family_name = length(split(" ", each.value.display_name)) > 1 ? split(" ", each.value.display_name)[1] : "-"
  }

  emails {
    value   = each.value.email
    primary = true
  }
}

# Consolidated Maps
locals {
  permission_set_arns = merge(
    { for k, v in data.aws_ssoadmin_permission_set.existing : k => v.arn },
    { for k, v in aws_ssoadmin_permission_set.pri : k => v.arn }
  )

  group_ids = merge(
    { for k, v in data.aws_identitystore_group.existing : k => v.group_id },
    { for k, v in aws_identitystore_group.pri : k => v.group_id }
  )

  user_ids = merge(
    { for k, v in data.aws_identitystore_user.existing : k => v.user_id },
    { for k, v in aws_identitystore_user.pri : k => v.user_id }
  )
}

module "permission_set_assignments" {
  source               = "./modules/pri_assign_permission_set"
  sso_instance_arn     = local.sso_instance_arn
  assignments          = local.permission_set_assignments
  permission_set_arns  = local.permission_set_arns
  group_ids            = local.group_ids
}

module "user_group_assignments" {
  source               = "./modules/pri_user_group_assignment"
  identity_store_id    = local.identity_store_id
  assignments          = local.user_group_assignments
  user_ids             = local.user_ids
  group_ids            = local.group_ids
}
```

## Benefits

- Automatically **detects and reuses existing** IDC resources (users, groups, permission sets).
- **Creates missing resources** automatically when not found.
- Maintains a **single source of truth** in JSON.
- Enables seamless collaboration and Terraform state consistency.

This implementation is now both **robust and production-grade**, supporting hybrid environments with full automation. Let me know if youâ€™d like this as a deployable starter project template or code-exported zip.
