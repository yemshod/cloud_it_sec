Since your **group and permission sets already exist** in your AWS account (created manually), Terraform doesn't have these resources in its state file. Because Terraform isn't managing them, it doesn't know their IDs or ARNs, causing the empty-map issue you're encountering.

---

## ðŸš© **Why you're seeing this error clearly:**

- Terraform is attempting to reference IDs and ARNs of groups and permission sets it didn't create and therefore doesn't manage.
- Your modules expect the IDs and ARNs in the outputs of earlier Terraform-created resources, which don't exist.

---

## âœ… **Recommended Solution (Terraform Data Sources):**

You need to use **Terraform Data Sources** explicitly to fetch the existing IDs and ARNs from AWS. This is the standard solution when referencing resources created manually or externally.

Here's the exact detailed solution clearly explained:

---

### âœ… **Step 1: Use Terraform Data Sources**

Add Terraform Data sources in the root module (`main.tf`) or in the `pri_assign_permission_set` module directly to fetch existing groups and permission set ARNs clearly:

**Example:**

```hcl
# Fetch existing Permission Set ARN
data "aws_ssoadmin_instances" "sso" {}

data "aws_ssoadmin_permission_set" "existing_permission_set" {
  instance_arn = tolist(data.aws_ssoadmin_instances.sso.arns)[0]
  name         = "AWSAdministratorAccess"
}

# Fetch existing Identity Store ID
data "aws_ssoadmin_instances" "sso_instances" {}

data "aws_identitystore_group" "existing_group" {
  identity_store_id = tolist(data.aws_ssoadmin_instances.sso.identity_store_ids)[0]
  alternate_identifier {
    unique_attribute {
      attribute_path  = "displayName"
      attribute_value = "gd_priaws_admin"
    }
  }
}
```

---

### âœ… **Step 2: Update your `pri_assign_permission_set` Module Call**

Pass these directly to the module from the root `main.tf`:

```hcl
module "permission_set_assignments" {
  source                = "./modules/pri_assign_permission_set"
  sso_instance_arn      = tolist(data.aws_ssoadmin_instances.sso.arns)[0]
  assignments           = local.permission_set_assignments

  # Manually construct permission set ARN and group ID
  permission_set_arns = {
    "AWSAdministratorAccess" = data.aws_ssoadmin_permission_set.existing_permission_set.arn
  }

  group_ids = {
    "gd_priaws_admin" = data.aws_identitystore_group.existing_group.group_id
  }
}
```

This explicitly provides the required maps directly from AWS rather than relying on Terraform-managed outputs.

---

### âœ… **Step 3: Ensure your JSON Assignment file remains the same**

Keep your `permission_set_assignments.json` file unchanged, matching the exact names used in the data queries:

```json
[
  {
    "group_name": "gd_priaws_admin",
    "permission_set_name": "AWSAdministratorAccess",
    "account_ids": ["123456789012", "1105669XXXX"]
  }
]
```

---

### âœ… **Step 4: Apply Terraform**

Execute Terraform again clearly and explicitly:

```bash
terraform init
terraform plan -var-file=terraform.tfvars
terraform apply -auto-approve -var-file=terraform.tfvars
```

This explicitly instructs Terraform to query existing AWS resources, fetch their IDs/ARNs, and then perform the assignment.

---

## âœ… **Why this is the correct approach explicitly:**

- Uses Terraformâ€™s built-in "Data Sources" clearly to retrieve IDs and ARNs for existing resources.
- Allows Terraform to manage assignments even when groups/permission sets are created manually or externally.
- Ensures no conflicts with existing resources, preserving their current state and configuration explicitly.

---

## âœ… **Important Notes:**

- Ensure your Terraform AWS credentials have permission to list and describe existing IDC resources.
- Explicitly verify group names and permission set names exactly match what's defined in AWS to avoid data lookup issues.




========================

## Flexible Terraform Implementation for AWS Identity Center Automation (JSON Files)

The solution below ensures flexibility, allowing JSON input files to be empty or contain changes dynamically. It gracefully handles empty files or files with no new changes without errors, effectively managing scalability and collaboration. It now supports **existing AWS IDC resources** as well as creating new ones when missing.

### Directory Structure
```
aws-sso-automation/
â”œâ”€â”€ modules
â”‚   â”œâ”€â”€ pri_create_user
â”‚   â”‚   â””â”€â”€ main.tf
â”‚   â”œâ”€â”€ pri_create_group
â”‚   â”‚   â””â”€â”€ main.tf
â”‚   â”œâ”€â”€ pri_user_group_assignment
â”‚   â”‚   â””â”€â”€ main.tf
â”‚   â”œâ”€â”€ pri_create_permission_set
â”‚   â”‚   â””â”€â”€ main.tf
â”‚   â””â”€â”€ pri_assign_permission_set
â”‚       â””â”€â”€ main.tf
â”œâ”€â”€ data
â”‚   â”œâ”€â”€ users.json
â”‚   â”œâ”€â”€ groups.json
â”‚   â”œâ”€â”€ user_group_assignments.json
â”‚   â”œâ”€â”€ permission_sets.json
â”‚   â””â”€â”€ permission_set_assignments.json
â”œâ”€â”€ policies
â”‚   â””â”€â”€ admin_inline_policy.json
â”œâ”€â”€ main.tf
â”œâ”€â”€ variables.tf
â”œâ”€â”€ outputs.tf
â””â”€â”€ terraform.tfvars
```

## Dynamic Support for Existing IDC Resources

### Root `main.tf` Enhancements:
```hcl
# Load SSO Instance Information

data "aws_ssoadmin_instances" "sso" {}

locals {
  sso_instance_arn  = tolist(data.aws_ssoadmin_instances.sso.arns)[0]
  identity_store_id = tolist(data.aws_ssoadmin_instances.sso.identity_store_ids)[0]

  permission_sets = length(file("data/permission_sets.json")) > 2 ? jsondecode(file("data/permission_sets.json")) : []
  groups          = length(file("data/groups.json")) > 2 ? jsondecode(file("data/groups.json")) : []
  users           = length(file("data/users.json")) > 2 ? jsondecode(file("data/users.json")) : []
  user_group_assignments     = length(file("data/user_group_assignments.json")) > 2 ? jsondecode(file("data/user_group_assignments.json")) : []
  permission_set_assignments = length(file("data/permission_set_assignments.json")) > 2 ? jsondecode(file("data/permission_set_assignments.json")) : []

  desired_permission_set_names = [for ps in local.permission_sets : ps.name]
  desired_group_names          = [for g in local.groups : g.group_name]
  desired_user_names           = [for u in local.users : u.user_name]
}

# Query Existing Permission Sets

data "aws_ssoadmin_permission_set" "existing" {
  for_each     = toset(local.desired_permission_set_names)
  name         = each.value
  instance_arn = local.sso_instance_arn
}

# Query Existing Groups

data "aws_identitystore_group" "existing" {
  for_each = toset(local.desired_group_names)

  identity_store_id = local.identity_store_id

  alternate_identifier {
    unique_attribute {
      attribute_path  = "displayName"
      attribute_value = each.value
    }
  }
}

# Query Existing Users

data "aws_identitystore_user" "existing" {
  for_each = toset(local.desired_user_names)

  identity_store_id = local.identity_store_id

  alternate_identifier {
    unique_attribute {
      attribute_path  = "userName"
      attribute_value = each.value
    }
  }
}

# Create Permission Sets if not existing
resource "aws_ssoadmin_permission_set" "pri" {
  for_each = {
    for ps in local.permission_sets :
    ps.name => ps if !contains(keys(data.aws_ssoadmin_permission_set.existing), ps.name)
  }

  name         = each.value.name
  description  = each.value.description
  instance_arn = local.sso_instance_arn
}

# Create Groups if not existing
resource "aws_identitystore_group" "pri" {
  for_each = {
    for g in local.groups :
    g.group_name => g if !contains(keys(data.aws_identitystore_group.existing), g.group_name)
  }

  identity_store_id = local.identity_store_id
  display_name      = each.value.group_name
  description       = each.value.description
}

# Create Users if not existing
resource "aws_identitystore_user" "pri" {
  for_each = {
    for u in local.users :
    u.user_name => u if !contains(keys(data.aws_identitystore_user.existing), u.user_name)
  }

  identity_store_id = local.identity_store_id
  user_name         = each.value.user_name
  display_name      = each.value.display_name

  name {
    given_name  = split(" ", each.value.display_name)[0]
    family_name = length(split(" ", each.value.display_name)) > 1 ? split(" ", each.value.display_name)[1] : "-"
  }

  emails {
    value   = each.value.email
    primary = true
  }
}

# Consolidated Maps
locals {
  permission_set_arns = merge(
    { for k, v in data.aws_ssoadmin_permission_set.existing : k => v.arn },
    { for k, v in aws_ssoadmin_permission_set.pri : k => v.arn }
  )

  group_ids = merge(
    { for k, v in data.aws_identitystore_group.existing : k => v.group_id },
    { for k, v in aws_identitystore_group.pri : k => v.group_id }
  )

  user_ids = merge(
    { for k, v in data.aws_identitystore_user.existing : k => v.user_id },
    { for k, v in aws_identitystore_user.pri : k => v.user_id }
  )
}

module "permission_set_assignments" {
  source               = "./modules/pri_assign_permission_set"
  sso_instance_arn     = local.sso_instance_arn
  assignments          = local.permission_set_assignments
  permission_set_arns  = local.permission_set_arns
  group_ids            = local.group_ids
}

module "user_group_assignments" {
  source               = "./modules/pri_user_group_assignment"
  identity_store_id    = local.identity_store_id
  assignments          = local.user_group_assignments
  user_ids             = local.user_ids
  group_ids            = local.group_ids
}
```

## Benefits

- Automatically **detects and reuses existing** IDC resources (users, groups, permission sets).
- **Creates missing resources** automatically when not found.
- Maintains a **single source of truth** in JSON.
- Enables seamless collaboration and Terraform state consistency.

This implementation is now both **robust and production-grade**, supporting hybrid environments with full automation. Let me know if youâ€™d like this as a deployable starter project template or code-exported zip.


============================

To **restrict a Microsoft Entra-registered applicationâ€™s access to Microsoft Graph API** such that it can access **only specific SharePoint Sites or folders**, you must **combine Microsoft Graph permissions with SharePoint site-specific or folder-level access controls.**

This is a complex and nuanced setup because Microsoft Graph permissions are **tenant-wide by default**, and fine-grained access control must be enforced via a combination of:

- **Granular Role Assignments (least privilege)**
- **Site/Folder-specific permission granting**
- **SharePoint REST API or Microsoft Graph with `Sites.Selected` permission**
- **Azure App Role Assignment (optional but preferred)**

---

## **Step-by-Step Guide**

### **STEP 1: Register an Application in Microsoft Entra ID (Azure AD)**

1. Go to **Microsoft Entra Admin Center** > **App registrations** > **New registration**
2. Set the application name, supported account types (usually "Accounts in this organizational directory only"), and Redirect URI (if needed).
3. Click **Register**.

---

### **STEP 2: Assign Microsoft Graph Permissions**

1. Go to **API permissions** > **Add a permission** > **Microsoft Graph**.
2. Choose **Application permissions** (not delegated).
3. Search and add:  
   - `Sites.Selected` â€“ *This allows the app to access only SharePoint sites that have been explicitly assigned to it*.
4. Click **Add permissions**, then **Grant admin consent**.

> **Do NOT** assign `Sites.Read.All` or `Sites.FullControl.All` â€“ those override fine-grained controls.

---

### **STEP 3: Assign the App Access to Specific SharePoint Sites**

This step is **outside of Entra ID** and must be done using **SharePoint Online Management Shell (PowerShell)**.

> Requires: `SharePoint Online Management Shell` + SharePoint Admin rights

1. **Connect to SharePoint Online:**
   ```powershell
   Connect-SPOService -Url https://your-tenant-admin.sharepoint.com
   ```

2. **Grant the app access to a specific site:**
   ```powershell
   $siteUrl = "https://your-tenant.sharepoint.com/sites/YOUR-SITE"
   $appId = "YOUR-APP-ID"

   # This grants the app READ access to the site
   Register-SPOApplicationPrincipal -Site $siteUrl -AppId $appId -DisplayName "Graph API App"

   Set-SPOApplicationPermission -Site $siteUrl -AppId $appId -Permission Read
   ```

   For **Write** or **FullControl**, change `-Permission` accordingly:
   - `Read`
   - `Write`
   - `FullControl`

3. **Verify permissions:**
   ```powershell
   Get-SPOApplicationPermissions -Site $siteUrl
   ```

---

### **STEP 4: Limit Access to Specific Folder (Optional, Advanced)**

Microsoft Graph doesn't support direct folder-level permission scoping **via app roles**. Instead:

- You grant **site access using `Sites.Selected`**, and then in the app logic, you **enforce folder-level logic programmatically** (i.e., only operate on `drive/items/{folder-id}`).
- Alternatively, use **SharePoint REST API** and enforce **folder permissions** by creating unique permissions on that folder:

1. **Break Permission Inheritance on Folder (via Graph/REST):**
   ```http
   POST /sites/{site-id}/drives/{drive-id}/items/{folder-id}/permissions
   ```

2. **Grant permission to app principal (complex â€“ needs ACS token support)**

> Fine-grained folder permission for an app principal is still limited; best handled by enforcing access logic within the app code.

---

### **STEP 5: Use Microsoft Graph to Access Site/Folder**

Now your app can access only explicitly granted SharePoint sites using Graph:

- **Get the Site ID**
   ```http
   GET https://graph.microsoft.com/v1.0/sites/your-tenant.sharepoint.com:/sites/YOUR-SITE
   ```

- **List Drive Items (root or specific folder):**
   ```http
   GET https://graph.microsoft.com/v1.0/sites/{site-id}/drives/{drive-id}/root/children
   ```

   or

   ```http
   GET https://graph.microsoft.com/v1.0/sites/{site-id}/drives/{drive-id}/items/{folder-id}/children
   ```

> Any attempt to access a site or folder not explicitly granted will result in **403 Forbidden**.

---

### **STEP 6: Secure the App Identity**

1. **Rotate secrets/certificates** regularly
2. Apply **Conditional Access** for workload identities (e.g., location/device restrictions)
3. Log all accesses using **Microsoft Purview**, **Audit logs**, and/or **Microsoft Defender for Cloud Apps (MCAS)**

---

### **Optional: Use Role-Based Access Control for App Management**

To delegate access securely:
- Use **App Roles** in Entra ID
- Combine with **Privileged Identity Management (PIM)** if you want to authorize **temporary elevated app permissions** to certain sites

---

## **Summary Table**

| Control Layer         | Technique                                        |
|-----------------------|--------------------------------------------------|
| Graph API Scope       | `Sites.Selected` only                            |
| Site Permission       | PowerShell (`Set-SPOApplicationPermission`)     |
| Folder Access Control | App logic or folder-level permission inheritance |
| Visibility Restriction| Enforced by denying broader permissions         |
| Monitoring            | Audit logs, MCAS, and Defender for Cloud Apps   |

---

If you want, I can also help you **generate the full PowerShell script**, a **Graph Postman Collection**, or **JSON for Postman environments** to test this. Let me know.


=========================

hcl
# Get SSO instance ARN and Identity Store ID
data "aws_ssoadmin_instances" "this" {}

locals {
  instance_arn     = tolist(data.aws_ssoadmin_instances.this.arns)[0]
  identity_store_id = tolist(data.aws_ssoadmin_instances.this.identity_store_ids)[0]
}

# Assign existing groups to accounts with existing permission sets
module "assign_group1_to_accounts" {
  source = "../modules/group_account_assignment"

  instance_arn        = local.instance_arn
  identity_store_id   = local.identity_store_id
  group_name          = "your-existing-group-1"
  permission_set_name = "your-existing-permission-set-1"
  account_ids         = "123456789012, 234567890123"
}

module "assign_group2_to_accounts" {
  source = "../modules/group_account_assignment"

  instance_arn        = local.instance_arn
  identity_store_id   = local.identity_store_id
  group_name          = "your-existing-group-2"
  permission_set_name = "your-existing-permission-set-2"
  account_ids         = "123456789012, 234567890123"
}
=====================

1. For the permission_set module:

hcl
# In /Users/rosel/terraform-aws-idc-modules/modules/permission_set/main.tf

# Attach permission boundary if specified
resource "aws_ssoadmin_permissions_boundary_attachment" "boundary" {
  count              = var.permission_boundary_type != "NONE" ? 1 : 0
  instance_arn       = var.instance_arn
  permission_set_arn = aws_ssoadmin_permission_set.this.arn

  permissions_boundary {
    # For AWS managed permission boundary
    dynamic "managed_policy_reference" {
      for_each = var.permission_boundary_type == "AWS_MANAGED" ? [1] : []
      content {
        name = var.permission_boundary_name
      }
    }

    # For customer managed permission boundary
    dynamic "customer_managed_policy_reference" {
      for_each = var.permission_boundary_type == "CUSTOMER_MANAGED" ? [1] : []
      content {
        name = var.permission_boundary_name
        path = var.permission_boundary_path
      }
    }
  }
}


2. For the permission_boundary module:

hcl
# In /Users/rosel/terraform-aws-idc-modules/modules/permission_boundary/main.tf

locals {
  # If permission_set_arn is provided, use it directly; otherwise, look up the permission set by name
  permission_set_arn = var.permission_set_arn != null ? var.permission_set_arn : data.aws_ssoadmin_permission_set.this[0].arn
}

data "aws_ssoadmin_permission_set" "this" {
  count         = var.permission_set_arn == null ? 1 : 0
  instance_arn  = var.instance_arn
  name          = var.permission_set_name
}

resource "aws_ssoadmin_permissions_boundary_attachment" "this" {
  instance_arn       = var.instance_arn
  permission_set_arn = local.permission_set_arn

  permissions_boundary {
    # For AWS managed permission boundary
    dynamic "managed_policy_reference" {
      for_each = var.boundary_type == "AWS_MANAGED" ? [1] : []
      content {
        name = var.boundary_name
      }
    }

    # For customer managed permission boundary
    dynamic "customer_managed_policy_reference" {
      for_each = var.boundary_type == "CUSTOMER_MANAGED" ? [1] : []
      content {
        name = var.boundary_name
        path = var.boundary_path
      }
    }
  }
}


3. Update the common.tf file to use the required_providers block correctly:

hcl
# In /Users/rosel/terraform-aws-idc-modules/deployment/common.tf

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"
}

# Get SSO instance ARN and Identity Store ID
data "aws_ssoadmin_instances" "this" {}

locals {
  instance_arn     = tolist(data.aws_ssoadmin_instances.this.arns)[0]
  identity_store_id = tolist(data.aws_ssoadmin_instances.this.identity_store_ids)[0]
}


These changes should resolve the errors you're seeing. The key differences are:

1. Using the correct resource name: aws_ssoadmin_permissions_boundary_attachment
2. Using the correct structure for the permissions boundary block
3. Using managed_policy_reference for AWS managed policies instead of managed_policy_arn



###################

1. For the permission_set module:

hcl
# In /Users/rosel/terraform-aws-idc-modules/modules/permission_set/main.tf

# Attach permission boundary if specified
resource "aws_ssoadmin_permissions_boundary_attachment" "boundary" {
  count              = var.permission_boundary_type != "NONE" ? 1 : 0
  instance_arn       = var.instance_arn
  permission_set_arn = aws_ssoadmin_permission_set.this.arn

  permissions_boundary {
    # For AWS managed permission boundary
    dynamic "managed_policy" {
      for_each = var.permission_boundary_type == "AWS_MANAGED" ? [1] : []
      content {
        arn = "arn:aws:iam::aws:policy/${var.permission_boundary_name}"
      }
    }

    # For customer managed permission boundary
    dynamic "customer_managed_policy" {
      for_each = var.permission_boundary_type == "CUSTOMER_MANAGED" ? [1] : []
      content {
        name = var.permission_boundary_name
        path = var.permission_boundary_path
      }
    }
  }
}


2. For the permission_boundary module:

hcl
# In /Users/rosel/terraform-aws-idc-modules/modules/permission_boundary/main.tf

locals {
  # If permission_set_arn is provided, use it directly; otherwise, look up the permission set by name
  permission_set_arn = var.permission_set_arn != null ? var.permission_set_arn : data.aws_ssoadmin_permission_set.this[0].arn
}

data "aws_ssoadmin_permission_set" "this" {
  count         = var.permission_set_arn == null ? 1 : 0
  instance_arn  = var.instance_arn
  name          = var.permission_set_name
}

resource "aws_ssoadmin_permissions_boundary_attachment" "this" {
  instance_arn       = var.instance_arn
  permission_set_arn = local.permission_set_arn

  permissions_boundary {
    # For AWS managed permission boundary
    dynamic "managed_policy" {
      for_each = var.boundary_type == "AWS_MANAGED" ? [1] : []
      content {
        arn = "arn:aws:iam::aws:policy/${var.boundary_name}"
      }
    }

    # For customer managed permission boundary
    dynamic "customer_managed_policy" {
      for_each = var.boundary_type == "CUSTOMER_MANAGED" ? [1] : []
      content {
        name = var.boundary_name
        path = var.boundary_path
      }
    }
  }
}


The key changes are:
1. Using managed_policy instead of managed_policy_reference
2. Using arn attribute for the managed policy instead of name
3. Using customer_managed_policy instead of customer_managed_policy_reference

