GTTS Security Team: Annual Identity and Access Management (IAM) Permissions Audit Process for Microsoft Azure
Document Version: 1.0 Effective Date: May 22, 2025 Prepared By: Grok, AI Assistant Approved By: [Pending Approval by GTTS Security Team Lead]

Purpose
This document outlines a formal, repeatable process for the GTTS Security Team to conduct an annual audit of Identity and Access Management (IAM) permissions in Microsoft Azure. The goal is to ensure that all permissions align with the principles of least privilege, comply with organizational security policies, and mitigate risks associated with unauthorized or excessive access. This process supports compliance requirements, enhances security posture, and ensures proper governance of Azure resources.

Scope
This process applies to all Azure subscriptions, resource groups, and resources managed by GTTS, including:
	•	Azure role-based access control (RBAC) assignments.
	•	Microsoft Entra ID roles and group memberships.
	•	Service principals, managed identities, and application permissions.
	•	Access to Azure resources such as virtual machines, storage accounts, databases, and other services.

Roles and Responsibilities
	•	GTTS Security Team Lead: Oversees the audit process, approves the audit plan, and ensures remediation actions are implemented.
	•	GTTS Security Team Members: Conduct the audit, collect data, analyze permissions, and document findings.
	•	Azure Administrators: Provide access to necessary Azure resources and assist with remediation.
	•	Identity Governance Administrator: Manages Microsoft Entra ID access reviews and Privileged Identity Management (PIM) configurations.
	•	Compliance Officer: Reviews audit findings to ensure alignment with regulatory and organizational requirements.

Frequency
This audit process must be conducted annually or more frequently if triggered by significant changes in the Azure environment (e.g., new subscriptions, major application deployments, or security incidents).

Prerequisites
	1	Access Requirements:
	◦	Team members must have at least the Security Reader or Monitoring Reader role to view permissions and audit logs.
	◦	For access reviews, team members need the Identity Governance Administrator or Privileged Role Administrator role for Microsoft Entra ID and Azure resources.
	◦	Access to Azure Monitor, Microsoft Entra audit logs, and Privileged Identity Management (PIM).
	2	Tools:
	◦	Azure Portal
	◦	Microsoft Entra admin center
	◦	Azure PowerShell or Azure CLI
	◦	Azure Monitor/Log Analytics
	◦	Microsoft Defender for Cloud
	◦	Microsoft Entra Permissions Management (if available)
	3	Documentation:
	◦	Inventory of all Azure subscriptions, resource groups, and critical assets.
	◦	List of all security groups, roles, and service principals in Microsoft Entra ID.
	◦	Organizational policies defining roles, access levels, and compliance requirements.

Audit Process
Step 1: Planning and Preparation
	1	Define Audit Scope and Objectives:
	◦	Identify all Azure subscriptions, management groups, and resource groups under GTTS management.
	◦	Confirm the scope includes all IAM components: Azure RBAC roles, Microsoft Entra ID roles, group memberships, service principals, and managed identities.
	◦	Set objectives to verify least privilege, identify stale accounts, and ensure compliance with policies.
	2	Assign Audit Team:
	◦	Designate team members with appropriate roles and access.
	◦	Ensure team members are trained on Azure IAM, Microsoft Entra ID, and audit tools.
	3	Gather Baseline Information:
	◦	Export a list of all Azure RBAC role assignments using the Azure Portal or PowerShell (Get-AzRoleAssignment).
	◦	Retrieve Microsoft Entra ID role assignments and group memberships via the Microsoft Entra admin center or PowerShell (Get-MgRoleAssignment).
	◦	Document existing policies, including Conditional Access policies and PIM configurations.
	4	Schedule the Audit:
	◦	Set a timeline for the audit (e.g., 4-6 weeks) to allow for data collection, analysis, and remediation.
	◦	Notify stakeholders (e.g., Azure administrators, application owners) of the audit schedule.
Step 2: Data Collection
	1	Review Azure RBAC Role Assignments:
	◦	In the Azure Portal, navigate to Access control (IAM) for each subscription and resource group.
	◦	Export role assignments to a CSV file for analysis (Get-AzRoleAssignment | Export-Csv -Path "RoleAssignments.csv").
	◦	Identify assignments at management group, subscription, resource group, and resource levels.
	2	Review Microsoft Entra ID Roles and Groups:
	◦	In the Microsoft Entra admin center, go to ID Governance > Privileged Identity Management > Microsoft Entra roles to review role assignments.
	◦	Check group memberships under Groups to identify users with access to sensitive resources.
	◦	Use PowerShell to export group memberships (Get-MgGroupMember -GroupId ).
	3	Audit Service Principals and Managed Identities:
	◦	List all service principals and managed identities in Microsoft Entra ID (Get-MgServicePrincipal).
	◦	Review permissions assigned to these identities in Azure RBAC and application permissions in Microsoft Entra ID.
	4	Collect Audit Logs:
	◦	Access Microsoft Entra audit logs in the Microsoft Entra admin center under Monitoring & health > Audit logs.
	◦	Filter logs for activities such as role assignments, group changes, and authentication events.
	◦	Use Azure Monitor to query logs for privileged account activities (SigninLogs and AuditLogs tables in Log Analytics).
	5	Leverage Microsoft Defender for Cloud:
	◦	Check recommendations under Security > Recommendations for IAM-related issues (e.g., excessive permissions, lack of MFA).
	◦	Review alerts for suspicious activities related to privileged accounts.
Step 3: Analysis
	1	Verify Least Privilege:
	◦	Compare role assignments against job functions to ensure users, groups, and service principals have only necessary permissions.
	◦	Identify overly permissive roles (e.g., Owner, Contributor) assigned to users or groups unnecessarily.
	◦	Check for user-specific permissions instead of group-based permissions, which can indicate poor access management practices.
	2	Identify Stale or Inactive Accounts:
	◦	Use Microsoft Entra ID sign-in logs to identify accounts with no recent activity (e.g., no sign-ins for 90+ days).
	◦	Review accounts with expired or unused privileged roles in PIM.
	3	Audit Group Memberships:
	◦	Verify that security groups and Microsoft 365 groups align with business needs.
	◦	Check for guest users or external accounts with unnecessary access to sensitive resources.
	4	Review Privileged Accounts:
	◦	Ensure privileged accounts (e.g., Global Administrator, User Access Administrator) are protected with MFA and run from Privileged Access Workstations (PAWs).
	◦	Validate that PIM is configured for time-bound and approval-based access to privileged roles.
	5	Check Compliance with Policies:
	◦	Confirm that Conditional Access policies are enforced (e.g., MFA, location-based restrictions).
	◦	Verify compliance with organizational policies and regulatory standards (e.g., GDPR, HIPAA) using Azure Policy and Compliance Manager.
	6	Identify Misconfigurations:
	◦	Look for resources without proper tagging or with overly permissive network security group (NSG) rules.
	◦	Check for applications or service principals with excessive delegated or application permissions.
Step 4: Access Reviews
	1	Create Access Reviews in PIM:
	◦	In the Microsoft Entra admin center, navigate to ID Governance > Privileged Identity Management > Azure resources or Microsoft Entra roles.
	◦	Create access reviews for critical roles (e.g., Owner, Global Administrator) and groups with access to sensitive resources.
	◦	Set review frequency to annual, with a start date and duration (e.g., 30 days).
	2	Assign Reviewers:
	◦	Select reviewers (e.g., group owners, managers, or security team members).
	◦	Include fallback reviewers to ensure completion of reviews.
	3	Review and Approve/Deny Access:
	◦	Reviewers validate whether users still require access based on job roles or project needs.
	◦	Deny access for users who no longer need it, and document justifications for approvals.
	4	Automate Recurring Reviews:
	◦	Configure recurring access reviews in PIM for continuous governance (e.g., quarterly for high-risk roles).
Step 5: Reporting
	1	Generate Audit Report:
	◦	Document findings, including:
	▪	List of excessive or misconfigured permissions.
	▪	Stale or inactive accounts.
	▪	Non-compliant configurations (e.g., lack of MFA, missing Conditional Access policies).
	▪	Recommendations for remediation.
	◦	Use templates from Azure Policy or Microsoft Entra Permissions Management for structured reporting.
	2	Export Audit Logs:
	◦	Export Microsoft Entra audit logs and role assignments to a secure storage account for record-keeping.
	◦	Use Azure Monitor to create dashboards for visualizing permission trends and anomalies.
	3	Share Findings:
	◦	Present the audit report to the GTTS Security Team Lead and Compliance Officer.
	◦	Distribute relevant findings to Azure administrators and resource owners for remediation.
Step 6: Remediation
	1	Revoke Unnecessary Permissions:
	◦	Remove excessive role assignments using the Azure Portal or PowerShell (Remove-AzRoleAssignment).
	◦	Revoke group memberships or application permissions in Microsoft Entra ID.
	2	Disable Stale Accounts:
	◦	Disable or delete inactive user accounts and service principals after validation.
	◦	Remove unused privileged roles in PIM.
	3	Enforce Security Best Practices:
	◦	Enable MFA for all privileged accounts if not already configured.
	◦	Implement Conditional Access policies for high-risk roles or resources.
	◦	Use Azure Policy to enforce tagging and compliance standards.
	4	Update PIM Configurations:
	◦	Configure time-bound and approval-based access for privileged roles.
	◦	Validate that all privileged accounts are included in PIM.
	5	Document Remediation Actions:
	◦	Record all changes made during remediation, including who performed the action and when.
	◦	Update the audit report with remediation outcomes.
Step 7: Post-Audit Review
	1	Validate Remediation:
	◦	Re-run permission exports and access reviews to confirm that issues have been resolved.
	◦	Verify that all actions align with organizational policies.
	2	Update Documentation:
	◦	Revise the inventory of subscriptions, resource groups, and roles based on audit findings.
	◦	Update the audit process document if new steps or tools are identified.
	3	Conduct Lessons Learned:
	◦	Hold a debrief with the audit team to discuss challenges, successes, and areas for improvement.
	◦	Document feedback to refine the process for the next audit cycle.
	4	Archive Audit Records:
	◦	Store audit reports and logs in a secure Azure storage account for compliance purposes (e.g., retain for 7 years per regulatory requirements).

Tools and Resources
	•	Azure Portal: For managing RBAC and accessing audit logs.
	•	Microsoft Entra admin center: For managing roles, groups, and access reviews.
	•	Azure PowerShell/Azure CLI: For scripting and exporting data.
	•	Azure Monitor/Log Analytics: For analyzing audit logs and creating dashboards.
	•	Microsoft Defender for Cloud: For security recommendations and alerts.
	•	Microsoft Entra Permissions Management: For advanced permission analytics (if licensed).
	•	Documentation References:
	◦	Azure RBAC Best Practices: https://learn.microsoft.com/en-us/azure/role-based-access-control/best-practices
	◦	Microsoft Entra Audit Logs: https://learn.microsoft.com/en-us/azure/active-directory/reports-monitoring/concept-audit-logs
	◦	Privileged Identity Management: https://learn.microsoft.com/en-us/azure/active-directory/privileged-identity-management/

Audit Timeline
Phase
Duration
Tasks
Planning
1 week
Define scope, assign team, gather baseline data, schedule audit.
Data Collection
2 weeks
Export role assignments, group memberships, audit logs, and Defender data.
Analysis
2 weeks
Verify least privilege, identify stale accounts, check compliance.
Access Reviews
2 weeks
Conduct PIM access reviews, approve/deny access, document results.
Reporting
1 week
Generate and share audit report with findings and recommendations.
Remediation
2 weeks
Revoke permissions, disable accounts, enforce policies, document actions.
Post-Audit Review
1 week
Validate remediation, update documentation, archive records, debrief.

Compliance and Retention
	•	Retain audit reports and logs for a minimum of 7 years to meet regulatory requirements (e.g., GDPR, HIPAA).
	•	Use Azure Monitor to route logs to a dedicated storage account for long-term retention.
	•	Ensure all actions comply with GTTS security policies and applicable regulations.

Approval
This process is subject to annual review and approval by the GTTS Security Team Lead. Any updates or changes must be documented and communicated to all relevant stakeholders.
Signature: ___________________________ Date: ___________________________

This process ensures a systematic, repeatable approach to auditing IAM permissions in Azure, enabling the GTTS Security Team to maintain a secure and compliant environment. For further assistance, contact the GTTS Security Team Lead or refer to Microsoft’s official documentation.



-------


Below is a detailed, step-by-step explanation of each task in Step 3: Analysis from the GTTS Security Team’s Annual IAM Permissions Audit Process for Microsoft Azure, as outlined previously. For each task, I’ll clarify how to perform it manually, identify whether it can be automated, and provide automation methods where applicable. Additionally, I’ll include a Splunk query to check for stale accounts using sign-in logs in the azure index.

Step 3: Analysis - Detailed Steps and Automation
The goal of the Analysis phase is to evaluate collected IAM data to ensure compliance with the principle of least privilege, identify risks, and verify adherence to organizational policies. Below are the detailed steps for each task, including manual processes, automation feasibility, and automation methods.

3.1 Verify Least Privilege
Objective: Ensure users, groups, and service principals have only the permissions necessary for their roles.
Manual Steps
	1	Collect Role Assignments:
	◦	Use the Azure Portal to navigate to Access control (IAM) for each subscription, resource group, and resource.
	◦	Review the list of role assignments (e.g., Owner, Contributor, Reader) for users, groups, and service principals.
	◦	Export assignments to a CSV file via Azure Portal > Access control (IAM) > Download role assignments.
	2	Compare with Job Functions:
	◦	Obtain a list of user job roles from HR or the identity governance team.
	◦	Map each user’s role assignments to their job function. For example, a developer should not have the Owner role on a production subscription.
	◦	Identify assignments that exceed required permissions (e.g., Contributor instead of Reader for read-only tasks).
	3	Check for Overly Permissive Roles:
	◦	Look for broad roles like Owner or Contributor assigned to individuals or groups unnecessarily.
	◦	Verify if custom roles with narrower permissions could replace broad roles.
	4	Review User-Specific vs. Group-Based Permissions:
	◦	In the Azure Portal, check if permissions are assigned directly to users instead of groups.
	◦	Flag user-specific assignments as potential misconfigurations, as group-based assignments are preferred for scalability and governance.
Automation Feasibility
	•	Fully Automatable: Collecting role assignments, comparing them against a predefined policy, and flagging overly permissive roles can be scripted.
	•	Partially Automatable: Mapping permissions to job functions requires a predefined mapping of roles to job functions, which may need manual input or integration with an HR system.
Automation Method
	1	Script to Export and Analyze Role Assignments:
	◦	Use Azure PowerShell to export role assignments and flag overly permissive roles.
	2	# Connect to Azure
	3	Connect-AzAccount
	4	
	5	# Get all subscriptions
	6	$subscriptions = Get-AzSubscription
	7	
	8	# Initialize output array
	9	$results = @()
	10	
	11	foreach ($sub in $subscriptions) {
	12	    Set-AzContext -SubscriptionId $sub.Id
	13	    $roleAssignments = Get-AzRoleAssignment
	14	
	15	    foreach ($assignment in $roleAssignments) {
	16	        $roleDefinition = Get-AzRoleDefinition -Id $assignment.RoleDefinitionId
	17	        $isBroadRole = $roleDefinition.Name -in @("Owner", "Contributor")
	18	
	19	        $results += [PSCustomObject]@{
	20	            SubscriptionId = $sub.Id
	21	            PrincipalName = $assignment.DisplayName
	22	            PrincipalType = $assignment.PrincipalType
	23	            RoleName = $roleDefinition.Name
	24	            Scope = $assignment.Scope
	25	            IsBroadRole = $isBroadRole
	26	        }
	27	    }
	28	}
	29	
	30	# Export results to CSV
	31	$results | Export-Csv -Path "RoleAssignmentsAnalysis.csv" -NoTypeInformation
	32	
	33	# Flag overly permissive roles
	34	$broadRoles = $results | Where-Object { $_.IsBroadRole -eq $true }
	35	$broadRoles | Export-Csv -Path "OverlyPermissiveRoles.csv" -NoTypeInformation
	36	
	◦	This script exports all role assignments and flags those with Owner or Contributor roles for further review.
	37	Compare with Job Function Mapping:
	◦	Create a CSV file mapping job roles to permitted Azure roles (e.g., JobRole,AllowedRoles).
	◦	Modify the script to cross-reference assignments against this mapping and flag mismatches.
	38	# Load job role mapping
	39	$roleMapping = Import-Csv -Path "JobRoleMapping.csv"
	40	
	41	# Flag mismatches
	42	$mismatches = @()
	43	foreach ($assignment in $results) {
	44	    $jobRole = ($roleMapping | Where-Object { $_.UserPrincipalName -eq $assignment.PrincipalName }).JobRole
	45	    $allowedRoles = ($roleMapping | Where-Object { $_.JobRole -eq $jobRole }).AllowedRoles -split ","
	46	    if ($assignment.RoleName -notin $allowedRoles) {
	47	        $mismatches += $assignment
	48	    }
	49	}
	50	$mismatches | Export-Csv -Path "RoleMismatches.csv" -NoTypeInformation
	51	
	52	Check User-Specific Permissions:
	◦	Modify the script to filter assignments where PrincipalType is User instead of Group.
	53	$userSpecificAssignments = $results | Where-Object { $_.PrincipalType -eq "User" }
	54	$userSpecificAssignments | IDC -Path "UserSpecificAssignments.csv" -NoTypeInformation
	55	

3.2 Identify Stale or Inactive Accounts
Objective: Identify accounts with no recent activity (e.g., no sign-ins for 90+ days) to reduce risk from unused credentials.
Manual Steps
	1	Access Sign-In Logs in Splunk:
	◦	Log in to Splunk and navigate to the Search & Reporting app.
	◦	Run a query to identify user accounts with no sign-in activity in the azure index for the last 90 days.
	2	Review Inactive Accounts:
	◦	Cross-reference inactive accounts with Microsoft Entra ID to confirm their status (e.g., enabled, disabled).
	◦	Check if these accounts have active role assignments in Azure RBAC or Microsoft Entra ID.
	3	Review PIM Roles:
	◦	In the Microsoft Entra admin center, go to ID Governance > Privileged Identity Management > Azure resources or Microsoft Entra roles.
	◦	Check for accounts with expired or unused privileged roles.
Splunk Query for Stale Accounts
index=azure sourcetype="azure:aad:signin" earliest=-90d
| stats count by userPrincipalName
| where count = 0
| join type=left userPrincipalName [search index=azure sourcetype="azure:aad:user" | fields userPrincipalName, accountEnabled]
| where accountEnabled = "true"
| table userPrincipalName, accountEnabled
	•	Explanation:
	◦	Searches the azure index for Microsoft Entra ID sign-in logs (sourcetype="azure:aad:signin") over the last 90 days.
	◦	Uses stats count by userPrincipalName to count sign-in events per user.
	◦	Filters for users with zero sign-ins (where count = 0).
	◦	Joins with user data to confirm accounts are still enabled (accountEnabled = "true").
	◦	Outputs a table of inactive, enabled accounts for review.
Automation Feasibility
	•	Fully Automatable: Identifying stale accounts and checking PIM roles can be fully scripted using Splunk queries and Azure PowerShell.
	•	Partially Automatable: Deciding whether to disable or delete accounts may require manual validation to avoid disrupting legitimate users.
Automation Method
	1	Automate Stale Account Detection in Splunk:
	◦	Save the above Splunk query as a scheduled search to run weekly/monthly.
	◦	Configure an alert to notify the GTTS Security Team when inactive accounts are found.
	◦	In Splunk, go to Settings > Searches, Reports, and Alerts > New Alert, paste the query, and set the schedule (e.g., daily) and alert action (e.g., email or webhook).
	2	Cross-Reference with Role Assignments:
	◦	Use PowerShell to check if inactive accounts have active role assignments.
	3	# Load inactive accounts from Splunk export (CSV)
	4	$inactiveAccounts = Import-Csv -Path "InactiveAccounts.csv"
	5	
	6	# Get role assignments
	7	$roleAssignments = Get-AzRoleAssignment
	8	
	9	# Find role assignments for inactive accounts
	10	$inactiveWithRoles = $roleAssignments | Where-Object { $_.PrincipalName -in $inactiveAccounts.userPrincipalName }
	11	$inactiveWithRoles | Export-Csv -Path "InactiveAccountsWithRoles.csv" -NoTypeInformation
	12	
	13	Automate PIM Role Review:
	◦	Use PowerShell to list PIM roles and their last activation.
	14	# Connect to Microsoft Graph
	15	Connect-MgGraph -Scopes "RoleManagement.Read.Directory"
	16	
	17	# Get PIM role assignments
	18	$pimRoles = Get-MgRoleManagementDirectoryRoleAssignment
	19	$inactivePimRoles = $pimRoles | Where-Object { $_.PrincipalId -in ($inactiveAccounts.userPrincipalName | ForEach-Object { (Get-MgUser -UserId $_).Id }) }
	20	$inactivePimRoles | Export-Csv -Path "InactivePimRoles.csv" -NoTypeInformation
	21	

3.3 Audit Group Memberships
Objective: Ensure security groups and Microsoft 365 groups align with business needs and do not include unauthorized users.
Manual Steps
	1	List Groups and Members:
	◦	In the Microsoft Entra admin center, go to Identity > Groups > All groups.
	◦	Select each group and review its members, focusing on groups with access to sensitive resources.
	◦	Export group memberships to CSV via Groups > Download members.
	2	Verify Business Need:
	◦	Cross-reference group memberships with project or department rosters to confirm legitimacy.
	◦	Flag groups with excessive members or those granting access to critical resources unnecessarily.
	3	Check for Guest/External Users:
	◦	Filter groups for guest users (e.g., users with #EXT# in their userPrincipalName).
	◦	Validate whether guest users require access to sensitive resources (e.g., storage accounts, databases).
Automation Feasibility
	•	Fully Automatable: Listing groups, exporting memberships, and flagging guest users can be scripted.
	•	Partially Automatable: Validating business need requires a predefined mapping of groups to business purposes, which may need manual setup.
Automation Method
	1	Script to Export Group Memberships: # Connect to Microsoft Graph
	2	Connect-MgGraph -Scopes "Group.Read.All"
	3	
	4	# Get all groups
	5	$groups = Get-MgGroup -All
	6	
	7	# Initialize output array
	8	$results = @()
	9	
	10	foreach ($group in $groups) {
	11	    $members = Get-MgGroupMember -GroupId $group.Id
	12	    foreach ($member in $members) {
	13	        $results += [PSCustomObject]@{
	14	            GroupName = $group.DisplayName
	15	            MemberName = $member.DisplayName
	16	            MemberUPN = $member.UserPrincipalName
	17	            IsGuest = $member.UserPrincipalName -like "*#EXT#*"
	18	        }
	19	    }
	20	}
	21	
	22	# Export results
	23	$results | Export-Csv -Path "GroupMemberships.csv" -NoTypeInformation
	24	
	25	# Flag guest users
	26	$guestUsers = $results | Where-Object { $_.IsGuest -eq $true }
	27	$guestUsers | Export-Csv -Path "GuestUsersInGroups.csv" -NoTypeInformation
	28	
	29	Validate Business Need:
	◦	Create a CSV mapping groups to their purpose (e.g., GroupName,BusinessPurpose,AllowedMembers).
	◦	Modify the script to flag memberships not aligned with the mapping.
	30	$groupMapping = Import-Csv -Path "GroupPurposeMapping.csv"
	31	$invalidMembers = @()
	32	foreach ($result in $results) {
	33	    $allowedMembers = ($groupMapping | Where-Object { $_.GroupName -eq $result.GroupName }).AllowedMembers -split ","
	34	    if ($result.MemberUPN -notin $allowedMembers) {
	35	        $invalidMembers += $result
	36	    }
	37	}
	38	$invalidMembers | Export-Csv -Path "InvalidGroupMembers.csv" -NoTypeInformation
	39	

3.4 Review Privileged Accounts
Objective: Ensure privileged accounts (e.g., Global Administrator, User Access Administrator) are secure and properly managed.
Manual Steps
	1	Identify Privileged Accounts:
	◦	In the Microsoft Entra admin center, go to ID Governance > Privileged Identity Management > Microsoft Entra roles.
	◦	Review roles like Global Administrator, Privileged Role Administrator, and User Access Administrator.
	◦	Check Azure RBAC for roles like Owner and User Access Administrator at the subscription or management group level.
	2	Verify MFA and PAW:
	◦	In the Microsoft Entra admin center, go to Identity > Users > All users, select privileged users, and check Authentication methods for MFA status.
	◦	Confirm with administrators whether Privileged Access Workstations (PAWs) are used for managing privileged accounts.
	3	Validate PIM Configurations:
	◦	In PIM, check that privileged roles are time-bound and require approval for activation.
	◦	Review the last activation date for each role to identify unused assignments.
Automation Feasibility
	•	Fully Automatable: Listing privileged accounts, checking MFA status, and validating PIM configurations can be scripted.
	•	Partially Automatable: Confirming PAW usage may require manual verification unless integrated with a device management system.
Automation Method
	1	Script to Check Privileged Accounts and MFA: # Connect to Microsoft Graph
	2	Connect-MgGraph -Scopes "Directory.Read.All", "RoleManagement.Read.Directory"
	3	
	4	# Get privileged role assignments
	5	$privilegedRoles = Get-MgRoleManagementDirectoryRoleAssignment | Where-Object { $_.RoleDefinitionId -in (Get-MgRoleDefinition | Where-Object { $_.DisplayName -in @("Global Administrator", "Privileged Role Administrator", "User Access Administrator") }).Id }
	6	
	7	# Initialize output array
	8	$results = @()
	9	
	10	foreach ($role in $privilegedRoles) {
	11	    $user = Get-MgUser -UserId $role.PrincipalId
	12	    $mfaStatus = (Get-MgUserAuthenticationMethod -UserId $user.Id).Count -gt 0
	13	    $results += [PSCustomObject]@{
	14	        UserName = $user.DisplayName
	15	        UserPrincipalName = $user.UserPrincipalName
	16	        RoleName = (Get-MgRoleDefinition -RoleDefinitionId $role.RoleDefinitionId).DisplayName
	17	        MFAEnabled = $mfaStatus
	18	    }
	19	}
	20	
	21	# Export results
	22	$results | Export-Csv -Path "PrivilegedAccounts.csv" -NoTypeInformation
	23	
	24	# Flag accounts without MFA
	25	$noMFA = $results | Where-Object { $_.MFAEnabled -eq $false }
	26	$noMFA | Export-Csv -Path "PrivilegedAccountsNoMFA.csv" -NoTypeInformation
	27	
	28	Validate PIM Configurations: # Get PIM role settings
	29	$pimSettings = Get-MgRoleManagementDirectoryRoleDefinition
	30	$nonCompliantSettings = $pimSettings | Where-Object { $_.IsEligibleRole -eq $true -and $_.RequireApproval -eq $false }
	31	$nonCompliantSettings | Export-Csv -Path "NonCompliantPIMSettings.csv" -NoTypeInformation
	32	

3.5 Check Compliance with Policies
Objective: Verify that IAM configurations align with organizational policies and regulatory standards.
Manual Steps
	1	Review Conditional Access Policies:
	◦	In the Microsoft Entra admin center, go to Security > Conditional Access.
	◦	Verify that policies enforce MFA, location-based restrictions, or device compliance for privileged users and sensitive resources.
	2	Check Azure Policy Compliance:
	◦	In the Azure Portal, go to Policy > Compliance.
	◦	Review compliance status for policies related to IAM (e.g., requiring MFA, restricting role assignments).
	3	Validate Regulatory Compliance:
	◦	Use Microsoft Purview Compliance Manager to check alignment with standards like GDPR or HIPAA.
	◦	Manually review audit findings against regulatory requirements.
Automation Feasibility
	•	Fully Automatable: Checking Conditional Access policies and Azure Policy compliance can be scripted.
	•	Partially Automatable: Regulatory compliance checks may require manual interpretation unless integrated with a compliance tool.
Automation Method
	1	Script to Check Conditional Access Policies: # Connect to Microsoft Graph
	2	Connect-MgGraph -Scopes "Policy.Read.All"
	3	
	4	# Get Conditional Access policies
	5	$caPolicies = Get-MgIdentityConditionalAccessPolicy
	6	
	7	# Check for MFA enforcement
	8	$nonCompliantPolicies = $caPolicies | Where-Object { $_.Conditions.Users.IncludeRoles -match "Global Administrator" -and $_.GrantControls.BuiltInControls -notcontains "mfa" }
	9	$nonCompliantPolicies | Export-Csv -Path "NonCompliantCAPolicies.csv" -NoTypeInformation
	10	
	11	Check Azure Policy Compliance: # Connect to Azure
	12	Connect-AzAccount
	13	
	14	# Get policy compliance
	15	$policyStates = Get-AzPolicyState
	16	$nonCompliantIAM = $policyStates | Where-Object { $_.PolicyDefinitionName -like "*IAM*" -and $_.ComplianceState -eq "NonCompliant" }
	17	$nonCompliantIAM | Export-Csv -Path "NonCompliantIAMPolicies.csv" -NoTypeInformation
	18	

3.6 Identify Misconfigurations
Objective: Detect misconfigurations like untagged resources, overly permissive NSGs, or excessive application permissions.
Manual Steps
	1	Check Resource Tagging:
	◦	In the Azure Portal, go to All resources and filter for resources without required tags (e.g., Environment, Owner).
	◦	Manually review untagged resources and their associated permissions.
	2	Review NSG Rules:
	◦	Navigate to Network security groups and review rules for overly permissive settings (e.g., allowing all traffic from 0.0.0.0/0).
	3	Audit Application Permissions:
	◦	In the Microsoft Entra admin center, go to Identity > Applications > Enterprise applications.
	◦	Review delegated and application permissions for service principals, focusing on high-privilege permissions (e.g., Directory.ReadWrite.All).
Automation Feasibility
	•	Fully Automatable: Checking for untagged resources, permissive NSG rules, and excessive application permissions can be scripted.
	•	Partially Automatable: Determining whether permissions are excessive may require a predefined list of acceptable permissions.
Automation Method
	1	Script to Check Untagged Resources: # Connect to Azure
	2	Connect-AzAccount
	3	
	4	# Get all resources
	5	$resources = Get-AzResource
	6	
	7	# Find untagged resources
	8	$untaggedResources = $resources | Where-Object { $null -eq $_.Tags -or $_.Tags.Count -eq 0 }
	9	$untaggedResources | Export-Csv -Path "UntaggedResources.csv" -NoTypeInformation
	10	
	11	Check NSG Rules: # Get all NSGs
	12	$nsgs = Get-AzNetworkSecurityGroup
	13	
	14	# Find overly permissive rules
	15	$permissiveRules = @()
	16	foreach ($nsg in $nsgs) {
	17	    $rules = $nsg.SecurityRules | Where-Object { $_.SourceAddressPrefix -eq "0.0.0.0/0" -and $_.Access -eq "Allow" }
	18	    foreach ($rule in $rules) {
	19	        $permissiveRules += [PSCustomObject]@{
	20	            NSGName = $nsg.Name
	21	            RuleName = $rule.Name
	22	            SourceAddress = $rule.SourceAddressPrefix
	23	            DestinationPort = $rule.DestinationPortRange
	24	        }
	25	    }
	26	}
	27	$permissiveRules | Export-Csv -Path "PermissiveNSGRules.csv" -NoTypeInformation
	28	
	29	Audit Application Permissions: # Connect to Microsoft Graph
	30	Connect-MgGraph -Scopes "Application.Read.All"
	31	
	32	# Get service principals and their permissions
	33	$spPermissions = @()
	34	$sps = Get-MgServicePrincipal -All
	35	foreach ($sp in $sps) {
	36	    $appRoles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $sp.Id
	37	    foreach ($role in $appRoles) {
	38	        $spPermissions += [PSCustomObject]@{
	39	            AppName = $sp.DisplayName
	40	            Permission = $role.AppRoleId
	41	            Resource = $role.ResourceDisplayName
	42	        }
	43	    }
	44	}
	45	$spPermissions | Where-Object { $_.Permission -like "*ReadWrite.All" } | Export-Csv -Path "HighPrivilegeAppPermissions.csv" -NoTypeInformation
	46	

Summary of Automation
Task
Automation Feasibility
Automation Tools
Verify Least Privilege
Fully Automatable
Azure PowerShell, Microsoft Graph
Identify Stale Accounts
Fully Automatable
Splunk, Azure PowerShell, Microsoft Graph
Audit Group Memberships
Fully Automatable
Microsoft Graph
Review Privileged Accounts
Fully Automatable
Microsoft Graph
Check Compliance with Policies
Fully Automatable
Microsoft Graph, Azure PowerShell
Identify Misconfigurations
Fully Automatable
Azure PowerShell, Microsoft Graph

Additional Notes
	•	Scheduling Automation: Use Azure Automation or a CI/CD pipeline (e.g., Azure DevOps) to schedule and run PowerShell scripts periodically. Store outputs in a secure Azure Blob Storage account for review.
	•	Splunk Integration: For Splunk queries, create dashboards to visualize inactive accounts and alert on anomalies. Integrate Splunk with Azure Event Hubs to ingest logs in real-time if not already configured.
	•	Documentation: Maintain a central repository (e.g., Azure DevOps Wiki or SharePoint) for scripts, Splunk queries, and audit outputs to ensure repeatability.
	•	Security Considerations: Ensure scripts run with least privilege (e.g., use managed identities for automation accounts) and store outputs securely with encryption.
This detailed process for the Analysis phase, combined with the Splunk query and automation scripts, provides a repeatable framework for auditing IAM permissions. Let me know if you need further clarification or additional scripts!


===========

Thank you — based on your clarification that GTTS Security’s annual IAM permissions review includes all access provisioned via Entra ID (formerly Azure AD) across Azure and other connected applications/platforms (e.g., SaaS apps, enterprise apps, third-party integrations), here’s the updated formal documented process, now expanded beyond Azure RBAC to include full Entra ID identity governance scope.

⸻

GTTS Annual Entra ID IAM Permissions Review Process

Document Owner: GTTS Security Team
Effective Date: [Insert Date]
Review Frequency: Annually
Applies To:
	•	Azure Subscriptions (via RBAC)
	•	Entra ID roles and objects (users, groups, SPNs, managed identities)
	•	All applications integrated with Entra ID
	•	Conditional Access Policies, PIM, and App Assignments

⸻

1. Objectives
	•	Review and validate user access, group memberships, application assignments, and role grants across the Entra ID ecosystem.
	•	Ensure permissions align with least privilege, Zero Trust, CMMC, and NIST 800-53 controls.
	•	Identify and revoke unused or unnecessary access.

⸻

2. Scope of the Review

Area	Description
Entra ID Roles	All privileged roles assigned to users, service principals, and groups
Azure RBAC	Resource-level access across all subscriptions
App Registrations	App roles, API permissions, consent grants, secret expiration
Enterprise Apps	User/group assignments, SSO configurations, permissions granted
Conditional Access Policies	Policies enforcing access controls, MFA, device compliance
PIM (Privileged Identity Management)	Eligible vs. active assignments and usage frequency


⸻

3. Governance and Setup

3.1. Assign Responsibilities
	•	Security Owner: Leads execution, documentation
	•	IAM Analyst: Extracts and processes data
	•	App/Subscription Owners: Validate and approve access
	•	Compliance Auditor: Verifies process outcomes

3.2. Communication Plan
	•	Notify stakeholders with a 30-day heads-up.
	•	Provide timelines and expected deliverables.

⸻

4. Execution Steps

4.1. Entra ID Role and Group Membership Review

Console Steps:
	1.	Portal:
Go to Entra ID > Roles & Administrators
	•	Export users in each role (Download button)
	2.	PowerShell / Graph:

Get-AzureADDirectoryRole | ForEach-Object {
    Get-AzureADDirectoryRoleMember -ObjectId $_.ObjectId
}


	3.	Review Group Memberships
	•	Go to Entra ID > Groups > All Groups
	•	Filter by “Assigned” or “Dynamic Membership”
	•	Export group membership for each group
	4.	Analysis:
	•	Identify over-privileged roles
	•	Identify stale/inactive users
	•	Flag groups with nested elevated permissions

⸻

4.2. Azure RBAC Role Assignment Review

Console Steps:
	1.	Azure Portal > Subscriptions > Access Control (IAM) > Role Assignments
	•	Export all assignments by scope (Subscription, RG, or Resource)
	2.	CLI:

az role assignment list --all > az-role-assignments.json


	3.	Review:
	•	Check for Owner/Contributor at subscription level
	•	Confirm justification for custom roles
	•	Flag permanent vs. PIM-based access

⸻

4.3. Enterprise App Access Review (SaaS/Custom Apps)

Console Steps:
	1.	Go to Entra ID > Enterprise Applications > All Applications
	2.	For each app:
	•	Select the app > Users and groups
	•	Export assignments
	•	Review “Permissions” tab for consent grants
	3.	Graph API / PowerShell:

Get-AzureADServicePrincipal | ForEach-Object {
    Get-AzureADServiceAppRoleAssignment -ObjectId $_.ObjectId
}


	4.	Review:
	•	Remove assignments to unused apps
	•	Identify delegated permissions or excessive admin consents
	•	Check for broad “All Users” assignments

⸻

4.4. App Registration (Service Principals and Secrets)

Console Steps:
	1.	Go to Entra ID > App registrations
	2.	Filter by “All Applications”
	3.	Review:
	•	API permissions (Delegated / Application)
	•	Certificate & Secret expiration
	•	Consent grants to Graph or Microsoft APIs
	4.	Graph API:
Use Graph Explorer or PowerShell to identify:
	•	Inactive SPNs
	•	Non-expiring secrets
	•	High-scope Graph permissions

⸻

4.5. Conditional Access Policy Validation

Console Steps:
	1.	Go to Entra ID > Security > Conditional Access
	2.	Export all policies using Microsoft Graph or JSON export
	3.	Review:
	•	Applicability (users/groups)
	•	Grant Controls (MFA, device compliance)
	•	High-privilege roles covered

⸻

4.6. Privileged Identity Management (PIM)

Console Steps:
	1.	Go to Entra ID > PIM > Azure AD Roles / Azure Resources
	2.	Export:
	•	Eligible assignments
	•	Active usage history
	•	Role activation justification logs
	3.	Review:
	•	Convert direct assignments to eligible
	•	Ensure activation requires approval & MFA
	•	Validate roles not being held indefinitely

⸻

5. Stakeholder Validation & Approval
	•	Provide each team/app owner a breakdown of:
	•	Assigned users/groups
	•	Role/permission scopes
	•	Recommended actions (Keep, Revoke, Reduce Scope)
	•	Document justifications for any exceptions or extended access

⸻

6. Remediation Activities

Task	Tool	Notes
Revoke outdated permissions	Entra Console / PowerShell	Document all revocations
Adjust access scopes	Azure IAM / PIM	Move from subscription to resource-level where possible
Reconfigure PIM	Entra PIM	Add approval workflows and usage policies
Review Conditional Access	Entra CA Portal	Add policies for uncovered roles or risky apps
Rotate secrets / SPN keys	App Registration Portal	Flag secrets >90 days old


⸻

7. Documentation & Reporting
	•	Store all reports, approvals, meeting notes, and export data in secure SharePoint or Confluence.
	•	Final report should include:
	•	Number of reviewed identities
	•	Count of revoked/adjusted permissions
	•	Exception logs
	•	Risk classification

⸻

8. Continuous Improvement
	•	Capture lessons learned.
	•	Develop automated scripts to extract permissions and cross-reference changes year over year.
	•	Establish KPIs (e.g., 100% role justifications, 0 unassigned Owner roles).

⸻

Appendix: Tools

Tool	Purpose
Entra Admin Portal	UI-based review and configuration
PowerShell (AzureAD, Az, MSOnline)	Bulk review, exports
Microsoft Graph API	Fine-grained automation
Access Reviews (Microsoft Entra)	Optional integrated tool for delegated user self-review
Azure Workbook / PowerBI	Visualize assignments and risk posture


⸻

Let me know if you want this turned into:
	•	A Confluence documentation page
	•	A repeatable Azure DevOps Pipeline task
	•	An Excel template for stakeholder validation
	•	Or a PowerShell/Graph automation bundle to support it

Also happy to create versioning or control plan if GTTS wants this embedded into their governance lifecycle.
