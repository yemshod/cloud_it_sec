# Cloud SOC Playbooks — AWS & Azure (Tailored to Current Environment)

**Owner:** Cloud Security (SOC)
**Version:** 1.0
**Last Updated:** {{today}}
**Environment Context (given):**

* Clouds: **AWS (primary)**, **Azure (secondary)**
* CSPM: **AWS Security Hub**, **Microsoft Defender for Cloud**
* SIEM: **Microsoft Sentinel** *(AWS logs not yet ingested)*
* Identity: **AWS Identity Center (IDC)** + **Okta** (human identities)
* Telemetry: CloudTrail → CloudWatch (some alarms exist), Azure logs → Sentinel
* Deployments: **Terraform IaC**
* Reporting: Weekly Security Hub counts by severity for **CIS 1.4**
* Baseline: Documented patterns / baseline config for **top 12 resources** (AWS & Azure)

---

## 0. Operating Model & RACI (summary)

**Roles**

* **SOC L1**: triage, enrichment, initial containment (playbook-driven); ticket hygiene.
* **SOC L2**: investigation, scoped containment, eradication plan; approves closures.
* **SOC L3/Cloud Sec Eng**: complex investigations, automation, detections, purple-team.
* **Cloud Platform Teams (AWS/Azure)**: service-owner changes (e.g., policy/SCP, VPC/NSG), remediation execution.
* **IAM (Okta/IDC)**: identity investigations, JIT access, credential revocation.
* **App/Product Owners**: business validation, maintenance windows, rollback testing.

**SLA/SLO (targets)**

* **Critical (P1)**: triage ≤15m, containment ≤1h, comms ≤30m, RCA draft ≤5d.
* **High (P2)**: triage ≤1h, containment ≤4h, RCA draft ≤7d.
* **Medium (P3)**: triage ≤4h, containment ≤2d, RCA draft ≤10d.

---

## 1. Tooling & Data Paths (current → target)

**Azure (current)**

* Alerts: Microsoft Defender for Cloud → Sentinel incidents.
* Logs: Entra ID sign-in, AzureActivity, SecurityAlert, AADAudit in Sentinel.
* Response: Logic Apps for containment (disable user, block IP, quarantine VM, rotate keys) where applicable.

**AWS (interim path; not in Sentinel yet)**

* **Primary alert plane**: **Security Hub** (incl. GuardDuty/Config/Inspector if enabled).
* **Signal transport**: EventBridge → SNS/Email/Webhook → Ticketing (Jira/ServiceNow) + On-call paging.
* **Investigation data**: CloudTrail (CloudWatch/S3), **CloudTrail Lake/Athena** for queries, Config timelines, VPC Flow, R53 Resolver DNS logs (where enabled).
* **Response**: SSM Runbooks, SCPs, IAM changes.

**AWS (target pattern when onboarded to Sentinel)**

* Normalize via **Data Connector** / **Security Lake → Sentinel** (OCSF) or **Syslog/CEF** → Correlate alongside Azure/Okta.

> Playbooks below are written to work **today** (interim) and note the **target** step once AWS telemetry is in Sentinel.

---

## 2. Global Intake & Triage Workflow

1. **Alert intake**

   * Azure: Sentinel Incident (from Defender or Analytics).
   * AWS: Security Hub Finding (or CloudWatch Alarm) → Ticket via EventBridge → SNS/Webhook.

2. **Classify severity** (P1/P2/P3) using: asset criticality, exposure (internet/customer data), confidence, dwell time.

3. **Enrich**

   * Owner & environment from **tags/session-tags** (owner, app, env, cost-center).
   * Last change (Config/Azure Activity), related findings, recent identity events (Okta/Entra).

4. **Decide**: Contain now vs collect more. Prefer **reversible, minimally disruptive** controls first (deny new sessions, network ringfence, token revoke) before destructive actions.

5. **Document**: ticket fields (who/what/when/where/how), evidence links, next actions, timers for SLA.

6. **Handoffs**: Engage App Owner/Platform/IAM with clear asks and rollback plan.

7. **Close** with RCA, prevention PRs (IaC/policies), and detection tuning.

---

## 3. Playbook Index

### AWS Playbooks

* **PB-AWS-01**: GuardDuty **High/Critical** Finding
* **PB-AWS-02**: **Security/Logging Tamper** (CloudTrail/Config/GuardDuty/Security Hub/SCP)
* **PB-AWS-03**: **S3 Public Exposure / Unusual Access**
* **PB-AWS-04**: **IAM Key/Role Misuse** (suspected leak / anomalous assume-role)
* **PB-AWS-05**: **EC2 Compromise Indicators** (crypto-miner/C2/port-scan)
* **PB-AWS-06**: **Cross-Account Access Anomaly** (Access Analyzer)

### Azure Playbooks

* **PB-AZ-01**: Defender for Cloud **High/Critical** Alert (compute/service)
* **PB-AZ-02**: **Risky Sign-in / Impossible Travel / MFA Change** (Entra + Sentinel)
* **PB-AZ-03**: **Key Vault Exposure / Purge/Firewall Changes**
* **PB-AZ-04**: **Storage Account Public Access / SAS Misuse**
* **PB-AZ-05**: **VM Suspected Compromise** (MDE/Defender)
* **PB-AZ-06**: **Policy & Diagnostic Settings Disabled/Missing**

---

## 4. AWS Playbooks (interim + target)

### PB-AWS-01: GuardDuty High/Critical Finding

**Trigger**: Security Hub receives GuardDuty finding with `Severity ≥ 7` (e.g., `UnauthorizedAccess:EC2/SSHBruteForce`, `CryptoCurrency:EC2/BitcoinTool.B!DNS`, `PenTest/IAMUser/` patterns).

**Objective**: Rapid triage → contain blast radius → verify persistence → eradicate → lessons into IaC/policies.

**Triage (L1)**

1. Confirm asset/account/region; capture **Finding ARN**, resource IDs, and **related findings**.
2. Enrich: owner/env/tags; recent **Config** changes; CloudTrail events around the resource.
3. Classify: internet-exposed? data-bearing? prod? If **internet-facing prod** → **P1**.

**Investigation (L2)**

* **CloudTrail**: Query actor, source IPs, API sequence around detection window.
* **VPC Flow/DNS**: egress spikes to crypto pools/C2; resolver lookups to known indicators.
* **Host**: via SSM `RunCommand` (if agent managed) to list processes, outbound connections, unusual crons.

**Containment (prefer reversible)**

* **Network**: Detach/public ENI → apply restrictive SG/NACL; for Azure-like containment, flip to **quarantine SG**.
* **Identity**: If role abuse, **revoke active sessions** (rotate instance profile creds: detach/attach role), tighten trust policy to least-priv roles; add **SCP deny** for risky APIs temporarily.
* **Data**: For S3 exfil patterns, apply **Block Public Access** and bucket policy deny.

**Eradication & Recovery**

* Rebuild ephemeral compute from golden AMI; rotate secrets; patch baseline.
* Validate no persistent scheduled tasks or user data injections.

**Closeout**

* RCA: root vector (exposed port? weak SG? vulnerable AMI?).
* **Prevention PRs**: SG policy (deny 0.0.0.0/0), AMI hardening, IAM least-priv, autoscaling launchTemplate fix.
* Tuning: Suppress known-good pentest sources (if applicable) with time-bounded exceptions.

**Automation Hooks**

* EventBridge rule on GuardDuty `severity >= 7` → Lambda/SSM: apply **quarantine SG**; tag `security_isolated=true`; post to ticket.
* SSM Documents: `Quarantine-EC2`, `Collect-Forensics`, `Restore-From-Golden`.

**Target (when in Sentinel)**

* Analytics rule: GuardDuty high/critical → **Entity mapping** (Host, Account, IP) → **Logic App** to quarantine + ticket.

---

### PB-AWS-02: Security/Logging Tamper (CloudTrail/Config/GuardDuty/Security Hub/SCP)

**Trigger**: Events like `StopLogging`, `DeleteTrail`, `PutBucketAcl public`, `DisableSecurityHub`, `DeleteDetector`, `CreatePolicy/AttachPolicy` (Organizations SCP) via CloudTrail or existing CloudWatch alarms.

**Objective**: Detect + immediately block further tamper; restore controls; investigate actor.

**Triage**

1. Validate event details; identify **principal**, **source IP**, **assumed role path**, **MFA** status.
2. Confirm if planned maintenance; if not → **P1**.

**Containment**

* Apply **SCP emergency deny** on policy/tamper APIs for the impacted OU/account set.
* For log buckets, enforce **S3 Object Lock** and restore Bucket Policies.

**Investigation**

* CloudTrail surrounding events (±1h) for lateral movement; Okta/IDC logs for the user’s JIT approvals; check unusual federation claims/session tags.
* Config timeline confirms drift created by whom/when.

**Eradication/Recovery**

* Recreate/restore trails, detectors, Security Hub enablement; rotate any admin keys.
* Validate EventBridge rules and SNS topics for alerting remain intact.

**Automation Hooks**

* EventBridge pattern (organizations, cloudtrail, guardduty, securityhub) → Lambda to **revert** change and page.

**Target (Sentinel)**

* KQL analytics on AWS activity (once ingested) with **watchlist of protected APIs** → Logic App to auto-rollback.

---

### PB-AWS-03: S3 Public Exposure / Unusual Access

**Trigger**: Security Hub `S3.1`/`S3.2`/Access Analyzer external access; CloudWatch alarm on `PutBucketAcl` or high GET rates.

**Triage**

1. Identify bucket, policy/ACL state, public access block settings, data classification (if known), and access pattern (CloudTrail).
2. If sensitive or prod → **P1**.

**Containment**

* Enforce **Block Public Access** (all four flags).
* Add bucket policy deny for `Principal: *` where not allow-listed.
* Optionally, use S3 **deny by tag** until exception approved.

**Investigation**

* CloudTrail: `GetObject`, `ListBucket` by external principals; origin IPs; timeframe; volume.
* If keys suspected leaked, rotate IAM user keys and invalidate STS creds.

**Eradication/Recovery**

* Update IaC (Terraform) for durable controls; create allow-listed presigned flows if business needs exist; add Access Analyzer archive rules with justification.

**Automation Hooks**

* Security Hub finding → SSM Automation `Remediate-S3-Public` (PutPublicAccessBlock) and comment back to ticket.

**Target (Sentinel)**

* KQL rule for `PutBucketPolicy/PutBucketAcl` public patterns; Workbook for S3 access anomalies.

---

### PB-AWS-04: IAM Key/Role Misuse (Leak / Anomalous AssumeRole)

**Trigger**: GuardDuty `CredentialAccess:IAMUser/...`, unusual `AssumeRole` chain, API from atypical ASN/geo.

**Containment**

* **Revoke sessions**: disable access keys / rotate; detach instance profile temporarily; apply SCP deny to sensitive APIs.

**Investigation**

* CloudTrail: enumerate API calls by the principal; look for `iam:CreateAccessKey`, `sts:AssumeRole` fan-out, `s3:GetObject` spikes.
* Okta/IDC: was the session JIT-approved? who approved? device posture?

**Eradication/Recovery**

* Key rotation; trust policy tightening; conditional policies (aws\:PrincipalTag, aws\:RequestedRegion).
* Add **honeytoken** creds to increase detection fidelity.

**Automation Hooks**

* EventBridge on suspicious patterns → Lambda to disable keys + page.

---

### PB-AWS-05: EC2 Compromise Indicators

**Trigger**: GuardDuty crypto-miner/C2/port-scan or VPC/DNS anomalies.

**Containment**

* Apply **quarantine SG** (egress only to update servers) via SSM/Lambda; stop public services; take snapshot for forensics.

**Investigation**

* SSM: process list, outbound sockets, new users, persistence (rc/local, crontab).
* CloudTrail: recent role changes, user-data updates, AMI or snapshot sharing.

**Recovery**

* Terminate & redeploy from **golden AMI**; rotate instance profile role; patch baseline updated.

---

### PB-AWS-06: Cross-Account Access Anomaly (Access Analyzer)

**Trigger**: New external principal access to KMS/S3/IAM roles flagged by Access Analyzer or Security Hub.

**Flow**: Validate business need → if unknown, **remove external access** (policy/role trust) → search past 30d access by that principal → document exception or remediation.

---

## 5. Azure Playbooks

### PB-AZ-01: Defender for Cloud High/Critical Alert

**Trigger**: `SecurityAlert` in Sentinel with Severity ≥ High (e.g., suspicious process, exploit attempt, container escape attempt).

**Triage (L1)**

* Identify impacted resource (VM/AKS/App), subscription, RG, owner; confirm internet-exposed & data sensitivity; set priority.

**Investigation (L2)**

* Sentinel hunting: `SecurityAlert` → related `AzureActivity` (policy changes), `SigninLogs` (actor), `VMProcessEvents`/MDE if available.
* Validate lateral movement indicators (NSG changes, identity role escalations).

**Containment**

* **Network**: apply **quarantine NSG**/stop public IP; scale set instance protection; isolate AKS node pool if needed.
* **Identity**: revoke tokens, reset service principals/secrets; enforce PIM approval.

**Eradication/Recovery**

* Patch, rotate credentials, redeploy from hardened images.

**Automation Hooks**

* Sentinel **Logic App**: Assign quarantine NSG, create ticket, notify owner; optionally snapshot disk.

---

### PB-AZ-02: Risky Sign-in / Impossible Travel / MFA Change

**Trigger**: Sentinel incident from `SigninLogs` with `riskDetail` or analytics for impossible travel/MFA reset.

**Containment**

* **Disable user** temporarily via Logic App; require re-registration of MFA; block IP/ASN with Conditional Access (temporary).
* If service principal: rotate secret/cert; limit consent.

**Investigation**

* Review recent app consents, token usage, mailbox rules (if M365), and other resource activity.

**Closeout**

* Enforce CA policy improvements (device compliance, strength MFA), user awareness.

---

### PB-AZ-03: Key Vault Exposure / Purge/Firewall Changes

**Trigger**: `AzureActivity` events for `VaultSet*`, `PurgeProtection`, firewall `Set*` to `AllowAll`, Defender alert on secret brute force.

**Containment**

* Re-enable **firewall + private endpoints**; enforce **soft-delete/purge-protection**; rotate impacted secrets.

**Investigation**

* Activity Log to identify actor; `SecretGet/List` spikes; dependent app outages risk.

**Automation Hooks**

* Policy with **DeployIfNotExists**; Sentinel Logic App to revert firewall to baseline template.

---

### PB-AZ-04: Storage Account Public Access / SAS Misuse

**Trigger**: Defender/Policy alert for `AllowBlobPublicAccess=true` or suspicious SAS usage.

**Containment**

* Set `AllowBlobPublicAccess=false`; revoke SAS tokens (regenerate keys); restrict via private endpoints.

**Investigation**

* Access logs for external IPs, path enumerations; data classification.

**Recovery**

* App pattern change to signed URLs with short TTL; monitoring for abnormal egress.

---

### PB-AZ-05: VM Suspected Compromise (MDE/Defender)

**Containment**

* Isolate VM (MDE isolate or NSG lock-down); take snapshot; stop suspicious processes with MDE response.

**Investigation**

* Process tree, persistence locations, identity tokens present; Azure Activity for admin ops.

**Recovery**

* Redeploy from image; rotate SP secrets; apply Update Manager baseline.

---

### PB-AZ-06: Policy & Diagnostic Settings Disabled/Missing

**Trigger**: Azure Policy non-compliant on critical assignments; Diagnostic settings removed.

**Containment/Recovery**

* Remediate with `DeployIfNotExists`; reattach diag settings (Key Vault, Storage, SQL, AppGW, AKS) to Log Analytics; verify retention.

**Automation**

* Sentinel rule monitors for policy assignment removal; Logic App reapplies baseline template.

---

## 6. Common Queries & Evidence Collection

**Azure KQL (Sentinel)**

* **Guardrail tamper (Azure)**

```kql
AzureActivity
| where OperationNameValue in ("MICROSOFT.INSIGHTS/DIAGNOSTICSETTINGS/DELETE","MICROSOFT.AUTHORIZATION/POLICYASSIGNMENTS/DELETE","MICROSOFT.KEYVAULT/VAULTS/SETPROPERTIES")
| project TimeGenerated, ResourceGroup, Resource, Caller, OperationNameValue, ActivityStatusValue, Properties
```

* **Risky sign-in spikes**

```kql
SigninLogs
| where RiskDetail !in ("none","hidden") or RiskState == "atRisk"
| summarize count() by bin(TimeGenerated, 1h), UserPrincipalName, RiskState, AppDisplayName
```

**AWS (interim, CloudTrail Lake SQL sample)**

* **Protected API changes**

```sql
SELECT eventTime, eventSource, eventName, userIdentity.arn, sourceIPAddress
FROM aws_cloudtrail
WHERE eventTime > timestampadd('hour', -6, current_timestamp)
  AND (eventName IN ('StopLogging','DeleteTrail','PutBucketAcl','DisableSecurityHub','DeleteDetector','CreatePolicy','AttachPolicy','DetachPolicy','DisablePolicyType'));
```

* **S3 access spike**

```sql
SELECT userIdentity.arn, sourceIPAddress,
       COUNT_IF(eventName LIKE 'List%') AS lists,
       COUNT_IF(eventName IN ('GetObject','GetObjectAttributes')) AS gets,
       date_trunc('minute', eventTime) AS t
FROM aws_cloudtrail
WHERE eventSource='s3.amazonaws.com' AND eventTime > timestampadd('hour', -2, current_timestamp)
GROUP BY 1,2,4 HAVING lists>50 AND gets>500 ORDER BY t;
```

**AWS CLI (evidence)**

```bash
aws securityhub get-findings --filters '{"SeverityLabel":[{"Value":"CRITICAL","Comparison":"EQUALS"}],"RecordState":[{"Value":"ACTIVE","Comparison":"EQUALS"}]}'
aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=<arn-or-user>
aws ssm send-command --document-name "AWS-RunShellScript" --targets Key=InstanceIds,Values=<id> --parameters commands='{"ps aux","netstat -plant"}'
```

---

## 7. Automation & IaC Hooks (ready-to-wire)

**AWS**

* **EventBridge → SSM**: GuardDuty severity ≥7 ⇒ attach quarantine SG; tag; snapshot; notify.
* **EventBridge (org + trail + guardduty)**: auto-rollback tamper attempts; notify.
* **SSM Documents**: `Quarantine-EC2`, `Remediate-S3-Public`, `Disable-Keys-And-Page`.

**Azure**

* **Logic Apps** from Sentinel incidents: disable user, require MFA reset, assign quarantine NSG, snapshot disks, create ticket.
* **Azure Policy** with `DeployIfNotExists`: enforce diag settings; remediate non-compliance automatically.

**CI/CD**

* Pre-commit: Checkov/Conftest/gitleaks for “top 12” baselines; block misconfigs pre-merge.
* Nightly drift check: `terraform plan -refresh-only` → post diffs to ticket.

---

## 8. Communications & Stakeholder Templates

**P1 Notification (15-minute)**

* What: Summary in one sentence; impacted account/subscription/resource; blast radius; user impact.
* Actions taken: containment so far, irreversible changes (if any).
* Next: data to be collected; owners engaged; ETA to decision.

**RCA (5–7 days)**

* Timeline, root cause, detection gaps, prevention work (IaC/policy), monitoring changes, lessons learned.

---

## 9. Metrics & Governance

* **Mean Time to Triage/Contain/Close** by severity.
* **Reopened findings** rate; **recurring resource offenders**.
* **Coverage KPIs**: CloudTrail data events %, DNS/VPC logging %, Policy & diag coverage %, Patch compliance %.
* **Identity risk**: wildcard policies count; unused roles/users >90d; # of JIT-admin sessions.

---

## 10. Next Steps (recommended)

1. **Finalize protected-API watchlist** (AWS + Azure) and enable corresponding EventBridge/Sentinel rules.
2. **Stand up SSM/Logic App runbooks** referenced here (quarantine, rollback, evidence collection).
3. **Wire ticket routing** (by tag/OU/subscription owner) with P1/P2/P3 SLOs.
4. **Pilot AWS → Sentinel ingestion** for GuardDuty & CloudTrail Lake to unify investigations.
5. Add these playbooks to on-call handbook; run two **game-days** (AWS tamper; Azure risky sign-in) within 30 days.

---

**Appendix A — Severity Matrix (quick)**

* **P1**: Confirmed/exploitable exposure of sensitive data; active compromise on internet-facing prod; logging/service tamper.
* **P2**: High-confidence malicious activity on non-prod or limited blast radius; privileged misconfig not yet abused.
* **P3**: Suspicious but unconfirmed; informational hygiene issues.

**Appendix B — Quarantine Security Group Baseline (AWS)**

* Ingress: **deny all**.
* Egress: allow 443 to package repo/proxy/SSM endpoints only.
* Tag: `security_isolated=true`.

**Appendix C — Quarantine NSG Baseline (Azure)**

* Inbound: deny all; allow management from SOC jump range if needed.
* Outbound: allow to Log Analytics/MDE/AV update only.

**Appendix D — Evidence Checklist**

* Timestamps (UTC), principal ARNs/UPNs, IPs/ASNs, request IDs, resource IDs, policy/ACL diffs, snapshots, command outputs, hashes, ticket links.

---

> **Note:** This document is intentionally written to be practical and vendor-native first, minimizing cost while enabling automation via Terraform, SSM, EventBridge, Azure Policy, and Logic Apps. Update references to your internal ticketing and notification systems where placeholders are shown.
