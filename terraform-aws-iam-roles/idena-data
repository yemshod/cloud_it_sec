the **`onboard_azure.sh`** script **does support onboarding multiple Azure subscriptions** by iterating over the `SUBSCRIPTION_ID_LIST` variable.

It handles:

* Role creation and assignment
* Resource group creation
* Microsoft Graph API permissions
* Service principal creation
* Credential generation
  For each subscription listed.


#### **Step 3: Login and Set Permissions**

```bash
az login
az account list --output table  # Confirm visibility of all subscriptions
```

#### **Step 4: Run the Script**

```bash
bash onboard_azure.sh
```

The script will:

âœ… Loop over each subscription
âœ… Validate context and current subscription
âœ… Register resource providers
âœ… Create custom roles if not present
âœ… Create a service principal
âœ… Assign roles at appropriate scopes (`subscription`, `resource group`, `tenant`)
âœ… Grant Microsoft Graph permissions (e.g., `Group.Read.All`, `User.ReadWrite.All`)
âœ… Apply Key Vault list-only access policies
âœ… Print credential JSON

---

## ðŸ“¦ Resources Created Per Subscription

| Resource Type                       | Scope                               | Notes                                                                                                            |
| ----------------------------------- | ----------------------------------- | ---------------------------------------------------------------------------------------------------------------- |
| **Azure Resource Group**            | Per region (multi-region supported) | Named `normalyze_permission_check_resource_group_<ID>`                                                           |
| **Service Principal (SP)**          | Tenant-wide                         | Used for DSPM integration                                                                                        |
| **App Registration**                | Tenant-wide                         | Binds to SP                                                                                                      |
| **Custom RBAC Roles**               | Per subscription                    | Created from local JSON definitions                                                                              |
| **RBAC Assignments**                | Subscription/Resource Group/Tenant  | Roles: `data.scan`, `resource.scan`, `Reader`, etc.                                                              |
| **Microsoft Graph API Permissions** | Tenant-wide                         | Via `az rest` and Graph API: `Application.Read.All`, `AuditLog.Read.All`, `User.ReadWrite.All`, `Group.Read.All` |
| **Key Vault Access Policies**       | Subscription-wide                   | Adds list-only policy for key+secret metadata                                                                    |
| **Credential JSON**                 | Console output                      | Used in Normalyze UI for final onboarding                                                                        |

---

## ðŸ”„ Backout Plan

### **Option A: Full Cleanup**

Manual removal across all subscriptions:

```bash
# Delete Service Principal
az ad sp delete --id <SERVICE_PRINCIPAL_APP_ID>

# Delete App Registration
az ad app delete --id <SERVICE_PRINCIPAL_APP_ID>

# Delete Custom Roles
for sub in "${SUBSCRIPTION_ID_LIST[@]}"; do
  az account set --subscription $sub
  az role definition delete --name "normalyze-data.scan-${ONBOARDING_ID}"
  az role definition delete --name "normalyze-resource.scan-${ONBOARDING_ID}"
done

# Delete Resource Groups
for sub in "${SUBSCRIPTION_ID_LIST[@]}"; do
  az account set --subscription $sub
  az group delete --name "normalyze_permission_check_resource_group_${ONBOARDING_ID}" --yes --no-wait
done
```

### **Option B: Remove Role Bindings Only**

If SP or resources should remain:

```bash
az role assignment delete --assignee <SP_ID> --role "<role>" --scope "<scope>"
```

---

## ðŸ§ª Test / Validation Plan

### âœ… **1. Validate Service Principal**

```bash
az ad sp show --id "<SP_APP_ID>"
```

### âœ… **2. Confirm Role Assignments**

```bash
az role assignment list --assignee <SP_ID> --all
```

### âœ… **3. Verify Microsoft Graph API Permissions**

```bash
az ad app permission list --id <SP_APP_ID>
az ad app permission admin-consent --id <SP_APP_ID>
```

### âœ… **4. Check Resource Group Creation**

```bash
az group show --name "normalyze_permission_check_resource_group_<ID>"
```

### âœ… **5. Key Vault Access Policy**

Validate list access is granted:

```bash
az keyvault show --name <vault> --query properties.accessPolicies
```

### âœ… **6. Credential Output Validation**

* Verify script prints a valid JSON with:

  * `tenantId`
  * `clientId`
  * `clientSecret`
* Paste into the Normalyze portal and validate successful connection.

---

## ðŸ“‹ Recommended Snow CHG Notes

> **Title:** DSPM Enablement Across Azure Subscriptions Using Normalyze
> **Description:** This change automates configuration across multiple Azure subscriptions to onboard Normalyze DSPM. It provisions a service principal, assigns custom and built-in roles, grants Microsoft Graph and Key Vault permissions, and generates credentials for secure, federated scanning.
> **Scope:** Multiple Azure subscriptions
> **Impact:** Minimal â€“ Read-only for discovery purposes
> **Backout:** Manual deletion of SP, roles, resource groups, and permission bindings
> **Validation:** Credential test, role verification, API permission validation, Normalyze console success

---

==============================

Thank you for sharing the full set of images. Based on thorough analysis of the `onboard_azure.sh` script and all the components you've uploaded, here's a formal breakdown for your **Snow Change Request (CHG)** documentation.

---

## ðŸ“˜ **Normalyze DSPM Onboarding â€“ Azure Automation Script**

### **Overview**

This automation script (`onboard_azure.sh`) enables **Normalyze** to perform **cloud and data discovery** in Azure subscriptions. It automates identity and access configuration through Azure CLI, Microsoft Graph API, and custom role deployments. It supports multi-subscription onboarding and complies with enterprise tagging and policy enforcement.

---

## âœ… **High-Level Summary of Script Actions**

| Phase                         | Description                                                                |
| ----------------------------- | -------------------------------------------------------------------------- |
| **Environment Validation**    | Validates required variables, subscription ID, tenant ID, and app details. |
| **Role & Permission Checks**  | Verifies if the user running the script has Owner/Global Admin rights.     |
| **Service Principal (SP)**    | Creates or validates a service principal with required scopes.             |
| **Custom Role Management**    | Creates or updates custom RBAC roles for Normalyze scanning.               |
| **Role Assignments**          | Assigns roles to the SP across resource group, subscription, or tenant.    |
| **Graph API Permissions**     | Adds Microsoft Graph API app permissions (e.g., `Group.Read.All`, etc.)    |
| **Credential Generation**     | Generates credential JSON to be uploaded to Normalyze UI.                  |
| **Retry & Consistency Logic** | Includes loops for Azure's eventual consistency delays.                    |
| **Multi-Region Support**      | Deploys across `PREFERRED_REGIONS` if defined.                             |

---

## ðŸ“¦ **Resources Created or Modified by the Script**

| Resource Type                 | Details                                                                                       |
| ----------------------------- | --------------------------------------------------------------------------------------------- |
| **Service Principal**         | `normalyze-<unique_id>` â€“ created using `az ad sp create-for-rbac` with `Reader` role         |
| **App Registration**          | Linked to SP, used to assign Graph API permissions                                            |
| **Custom RBAC Roles**         | Created from local JSON role definition files for `data.scan`, `resource.scan`, etc.          |
| **Role Assignments**          | Assigned to SP at tenant, subscription, or resource group scope                               |
| **Resource Group(s)**         | `normalyze_permission_check_resource_group_<ONBOARDING_ID>` created per region                |
| **Graph API App Permissions** | Assigned: `Application.Read.All`, `AuditLog.Read.All`, `Group.Read.All`, `User.ReadWrite.All` |
| **Credential JSON Output**    | Printed to console with app/client secret for upload to Normalyze UI                          |

---

## ðŸ”§ **Implementation Plan (Multi-Subscription Execution)**

### **Pre-requisites**

* Azure CLI installed and logged in.
* User running the script must be:

  * **Owner** on the subscription(s)
  * **Global Administrator** in Azure AD (for Graph permissions)
* Azure resource providers registered (validated by script).

---

### **Step-by-Step Execution**

#### 1. **Login and Set Subscription**

```bash
az login
az account set --subscription "<SUBSCRIPTION_ID>"
```

#### 2. **Run the Script**

```bash
bash onboard_azure.sh
```

> The script will:

* Validate current Azure context
* Register Microsoft providers (e.g., Microsoft.App, ContainerRegistry)
* Create Service Principal
* Deploy custom roles
* Assign RBAC roles
* Assign Microsoft Graph API permissions
* Output credential config JSON

#### 3. **Capture Credential JSON**

* Copy the JSON printed in terminal (usually towards the end)
* Paste it into the Normalyze onboarding portal

---

## ðŸ”„ **Backout Plan**

### Option 1: Full Cleanup

Manually remove all resources created:

```bash
# Delete SP
az ad sp delete --id "<SP_APP_ID>"

# Delete custom roles
az role definition delete --name "<custom_role_name>"

# Delete resource groups
az group delete --name "<RESOURCE_GROUP_NAME>" --yes --no-wait
```

### Option 2: Revoke Only Permissions

```bash
az role assignment delete --assignee "<SP_OBJECT_ID>" --role "<role_name>" --scope <scope>
```

You may also remove Graph API permissions via Graph Explorer or PowerShell:

```powershell
Remove-AzureADServicePrincipalAppRoleAssignment -ObjectId <SP_OBJECT_ID> -AppRoleId <ROLE_ID>
```

---

## ðŸ§ª **Validation / Testing Plan**

### 1. **Confirm SP Creation**

```bash
az ad sp show --id "<SP_APP_ID>"
```

### 2. **Verify Role Assignments**

```bash
az role assignment list --assignee "<SP_OBJECT_ID>"
```

### 3. **Verify Resource Group**

```bash
az group show --name "<RESOURCE_GROUP_NAME>"
```

### 4. **Check Graph API Permissions**

Use MS Graph Explorer or `az ad sp show --id` to verify assigned permissions like:

* `Group.Read.All`
* `AuditLog.Read.All`
* `Application.Read.All`

### 5. **Upload Credential JSON**

Paste the final config into the Normalyze portal and validate onboarding connection.

---

## ðŸ—‚ **Recommended Change Record Notes for SNOW**

> **Title:** Enable DSPM Access for Azure via Normalyze Script-Based Onboarding
> **Summary:** This change enables DSPM integration with Azure by executing the vendor-provided automation script. It configures service principal identity, grants necessary Azure and Graph permissions, and generates credential JSON for DSPM platform connection.
> **Scope:** Multi-subscription (targets listed in implementation section)
> **Risk Level:** Medium â€“ scoped to read-only with tenant-wide visibility
> **Rollback:** Manual SP and role removal
> **Validation:** SP creation, permission review, successful Normalyze onboarding


