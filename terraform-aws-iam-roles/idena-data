Here is a comprehensive and formally structured change request support document to help you include the **Normalyze onboarding script execution via GCP Console** in your Snow CHG ticket. This version aligns with implementation, backout, and validation expectations for Change Management.

---

## üìò **Normalyze DSPM GCP Integration ‚Äì Implementation Plan**

### **Objective**

To onboard the Normalyze platform to the GCP project `prj-jb-d-infosec` using the federated identity model by executing a pre-signed Normalyze onboarding shell script hosted on AWS S3. This enables cloud scanning via a workload identity provider without long-term credentials.

---

## ‚úÖ **Implementation Plan**

### **Step-by-Step Execution Instructions**

#### **1. Log into GCP Console**

* Navigate to: [https://console.cloud.google.com](https://console.cloud.google.com)
* Sign in using your organizational GCP credentials.
* Ensure you have the necessary roles:

  * `Owner` or `Editor` on the project
  * Or sufficient custom roles for IAM, API enabling, and service account creation

#### **2. Open Cloud Shell**

* On the top right of the GCP Console, click the terminal icon (üìü) to open **Cloud Shell**
* Wait for the terminal to fully initialize (2‚Äì5 seconds)

#### **3. Set Target Project**

Ensure you're scoped to the intended onboarding project:

```bash
gcloud config set project prj-jb-d-infosec
```

Confirm:

```bash
gcloud config list project
```

#### **4. Download and Run the Normalyze Script**

Copy and run the `wget` command provided by Normalyze (from the onboarding UI or PDF):

```bash
wget -O - "https://s3.us-east-2.amazonaws.com/onboarding-gcp-script-normalyze.io/m02bn26fy27x4jatstf?...<signed_url_params>" | bash
```

* This will dynamically pull and execute the onboarding shell script.
* The script performs actions such as:

  * Enabling \~25 GCP APIs
  * Creating a GCP service account
  * Setting up IAM roles and bindings
  * Configuring workload identity federation
  * Generating the credential JSON for Normalyze UI upload

#### **5. Save Credential File**

After execution, a JSON credential file is generated:

* Copy the JSON content from terminal
* Paste into the Normalyze onboarding interface under **Credential Configuration** as prompted

---

## üîÑ **Backout Plan**

If onboarding fails or needs to be rolled back:

### **Option 1: Manual Resource Cleanup**

Use the following commands to reverse the actions:

```bash
# Delete custom roles
gcloud iam roles delete normalyze_access_artifactory_role_m02bn26fy27x4jatstf --project=prj-jb-d-infosec
gcloud iam roles delete normalyze_snippets_storage_role_m02bn26fy27x4jatstf --project=prj-jb-d-infosec

# Delete service account
gcloud iam service-accounts delete normalyze-m02bn26fy27x4jatstf@prj-jb-d-infosec.iam.gserviceaccount.com

# Delete workload identity pool and provider
gcloud iam workload-identity-pools delete normalyze-m02bn26fy27x4jatstf --location="global" --quiet
```

### **Option 2: Revoke Role Bindings Only**

If partial rollback is needed (e.g., leave resources but remove permissions):

```bash
gcloud projects remove-iam-policy-binding prj-jb-d-infosec \
  --member="serviceAccount:normalyze-m02bn26fy27x4jatstf@prj-jb-d-infosec.iam.gserviceaccount.com" \
  --role="roles/iam.securityReviewer"
# Repeat for all roles assigned
```

---

## üß™ **Test / Validation Plan**

After onboarding, validate the setup using the following checks:

### **1. Validate Credential JSON Upload**

* In the Normalyze UI, verify:

  * Credential JSON is accepted
  * Connection status changes to ‚ÄúVerified‚Äù or ‚ÄúConnected‚Äù

### **2. Validate Permissions**

* In GCP:

  * Navigate to **IAM & Admin ‚Üí Service Accounts**
  * Confirm `normalyze-m02bn26fy27x4jatstf@...` service account exists
  * Confirm it has all expected roles and bindings

### **3. Review Logs**

* Run audit log query in GCP Logs Explorer:

```bash
resource.type="project"
protoPayload.authenticationInfo.principalEmail="normalyze-m02bn26fy27x4jatstf@prj-jb-d-infosec.iam.gserviceaccount.com"
```

* Look for successful access attempts to:

  * Storage Buckets
  * Artifact Registry
  * Cloud Resource APIs

### **4. Confirm Data Visibility in Normalyze**

* In the Normalyze portal, under the GCP project:

  * Check that assets (e.g., GCS buckets, BigQuery datasets) are being discovered
  * Ensure scans are running without errors

---

## üìã Optional Notes for CHG Ticket

* This onboarding is aligned with **principle of least privilege**, scoped to DSPM access needs.
* All credentials are short-lived and follow GCP‚Äôs **Workload Identity Federation** model.
* The execution is **idempotent**‚Äîre-running the script will not result in duplicate resources.



==============


### üßæ GCP Resources Created by This Script

| Resource Type                  | Name/Details                                                                                                          |
| ------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| **GCP Service Account**        | `normalyze-m02bn26fy27x4jatstf@<PROJECT_ID>.iam.gserviceaccount.com`                                                  |
| **IAM Custom Role**            | - Artifactory: `normalyze_access_artifactory_role_<suffix>`<br>- Snippets: `normalyze_snippets_storage_role_<suffix>` |
| **Workload Identity Pool**     | Name: `normalyze-m02bn26fy27x4jatstf`                                                                                 |
| **Workload Identity Provider** | Linked to AWS; provides federation from Normalyze AWS IAM                                                             |
| **IAM Policy Bindings**        | Applied to service account and project:                                                                               |
|                                | - `roles/iam.securityReviewer`<br>- `roles/viewer`<br>- `roles/run.developer`<br>- `roles/run.serviceAgent`           |
|                                | - `roles/bigquery.dataViewer`, `roles/storage.objectViewer`, etc.                                                     |
|                                | - Custom Artifactory and Snippets roles                                                                               |
|                                | - Organization-level: `resourcemanager.tagViewer`                                                                     |
| **Credential JSON File**       | `normalyze-m02bn26fy27x4jatstf_credentials.json`                                                                      |
| **Enabled GCP APIs**           | 25+ services including: IAM, Compute, Storage, Artifact Registry, BigQuery, Cloud Functions, etc.                     |

---

### ‚úÖ Sample Change Request (CHG) Entry for Snow

**Title:**
Enable Normalyze DSPM GCP Onboarding via Workload Identity Federation

**Description:**
This CHG enables integration of the Normalyze DSPM platform into the `prj-jb-d-infosec` GCP project using Workload Identity Federation. The goal is to allow Normalyze to scan and classify cloud data assets without requiring static access credentials.

**Change Type:** Standard / Infrastructure Change
**Impact:** Low
**Risk:** Medium (IAM permissions + API enabling)
**Backout Plan:** Disable IAM bindings and service APIs if onboarding fails

**Resources to be created:**

* GCP Service Account: `normalyze-m02bn26fy27x4jatstf`
* IAM Custom Roles (Artifactory, Snippets GCS Access)
* IAM Bindings (Viewer, Security Reviewer, Developer, Custom roles)
* Workload Identity Pool and AWS Provider
* Enable GCP APIs (\~25 services)

**Justification:**
Normalyze requires federated access for agentless scanning of GCP data assets. This setup avoids long-term credentials and adheres to best practices using workload identity federation.

**Execution Plan:**

* Run onboarding script from secure terminal
* Confirm IAM bindings, role creation, and federation config
* Validate project and service account alignment
* Upload credential JSON into Normalyze UI

Let me know if you'd like the CHG summary in a Word or JSON format for import.

